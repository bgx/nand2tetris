<tokens>
	<keyword> class </keyword>
	<identifier> Wall </identifier>
	<symbol> { </symbol>
	<keyword> field </keyword>
	<keyword> int </keyword>
	<identifier> count </identifier>
	<symbol> ; </symbol>
	<keyword> field </keyword>
	<identifier> Array </identifier>
	<identifier> bricks </identifier>
	<symbol> ; </symbol>
	<keyword> field </keyword>
	<identifier> Brick </identifier>
	<identifier> temp </identifier>
	<symbol> ; </symbol>
	<keyword> constructor </keyword>
	<identifier> Wall </identifier>
	<identifier> new </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> count </identifier>
	<symbol> = </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> bricks </identifier>
	<symbol> = </symbol>
	<identifier> Array </identifier>
	<symbol> . </symbol>
	<identifier> new </identifier>
	<symbol> ( </symbol>
	<integerConstant> 20 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<keyword> this </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> dispose </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> bricks </identifier>
	<symbol> . </symbol>
	<identifier> dispose </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Memory </identifier>
	<symbol> . </symbol>
	<identifier> deAlloc </identifier>
	<symbol> ( </symbol>
	<keyword> this </keyword>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> newBrick </identifier>
	<symbol> ( </symbol>
	<keyword> int </keyword>
	<identifier> Ax </identifier>
	<symbol> , </symbol>
	<keyword> int </keyword>
	<identifier> Ay </identifier>
	<symbol> , </symbol>
	<keyword> int </keyword>
	<identifier> Awidth </identifier>
	<symbol> , </symbol>
	<keyword> int </keyword>
	<identifier> Aheight </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> bricks </identifier>
	<symbol> [ </symbol>
	<identifier> count </identifier>
	<symbol> ] </symbol>
	<symbol> = </symbol>
	<identifier> Brick </identifier>
	<symbol> . </symbol>
	<identifier> new </identifier>
	<symbol> ( </symbol>
	<identifier> Ax </identifier>
	<symbol> , </symbol>
	<identifier> Ay </identifier>
	<symbol> , </symbol>
	<identifier> Awidth </identifier>
	<symbol> , </symbol>
	<identifier> Aheight </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> count </identifier>
	<symbol> = </symbol>
	<identifier> count </identifier>
	<symbol> + </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> destroyBrick </identifier>
	<symbol> ( </symbol>
	<keyword> int </keyword>
	<identifier> brickID </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> i </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> i </identifier>
	<symbol> = </symbol>
	<identifier> brickID </identifier>
	<symbol> ; </symbol>
	<keyword> while </keyword>
	<symbol> ( </symbol>
	<identifier> i </identifier>
	<symbol> &lt; </symbol>
	<symbol> ( </symbol>
	<identifier> count </identifier>
	<symbol> - </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> bricks </identifier>
	<symbol> [ </symbol>
	<identifier> i </identifier>
	<symbol> ] </symbol>
	<symbol> = </symbol>
	<identifier> bricks </identifier>
	<symbol> [ </symbol>
	<identifier> i </identifier>
	<symbol> + </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ] </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> i </identifier>
	<symbol> = </symbol>
	<identifier> i </identifier>
	<symbol> + </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> let </keyword>
	<identifier> count </identifier>
	<symbol> = </symbol>
	<identifier> count </identifier>
	<symbol> - </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> newBrickGroup </identifier>
	<symbol> ( </symbol>
	<keyword> int </keyword>
	<identifier> Ax </identifier>
	<symbol> , </symbol>
	<keyword> int </keyword>
	<identifier> Ay </identifier>
	<symbol> , </symbol>
	<keyword> int </keyword>
	<identifier> Awidth </identifier>
	<symbol> , </symbol>
	<keyword> int </keyword>
	<identifier> Aheight </identifier>
	<symbol> , </symbol>
	<keyword> int </keyword>
	<identifier> Adelta_x </identifier>
	<symbol> , </symbol>
	<keyword> int </keyword>
	<identifier> Adelta_y </identifier>
	<symbol> , </symbol>
	<keyword> int </keyword>
	<identifier> Arows </identifier>
	<symbol> , </symbol>
	<keyword> int </keyword>
	<identifier> Acolumns </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> i </identifier>
	<symbol> , </symbol>
	<identifier> j </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> i </identifier>
	<symbol> = </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ; </symbol>
	<keyword> while </keyword>
	<symbol> ( </symbol>
	<identifier> i </identifier>
	<symbol> &lt; </symbol>
	<identifier> Arows </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> j </identifier>
	<symbol> = </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ; </symbol>
	<keyword> while </keyword>
	<symbol> ( </symbol>
	<identifier> j </identifier>
	<symbol> &lt; </symbol>
	<identifier> Acolumns </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> newBrick </identifier>
	<symbol> ( </symbol>
	<identifier> Ax </identifier>
	<symbol> + </symbol>
	<symbol> ( </symbol>
	<identifier> j </identifier>
	<symbol> * </symbol>
	<identifier> Adelta_x </identifier>
	<symbol> ) </symbol>
	<symbol> , </symbol>
	<identifier> Ay </identifier>
	<symbol> + </symbol>
	<symbol> ( </symbol>
	<identifier> i </identifier>
	<symbol> * </symbol>
	<identifier> Adelta_y </identifier>
	<symbol> ) </symbol>
	<symbol> , </symbol>
	<identifier> Awidth </identifier>
	<symbol> , </symbol>
	<identifier> Aheight </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> j </identifier>
	<symbol> = </symbol>
	<identifier> j </identifier>
	<symbol> + </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> let </keyword>
	<identifier> i </identifier>
	<symbol> = </symbol>
	<identifier> i </identifier>
	<symbol> + </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> draw </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> i </identifier>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Screen </identifier>
	<symbol> . </symbol>
	<identifier> setColor </identifier>
	<symbol> ( </symbol>
	<keyword> true </keyword>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> i </identifier>
	<symbol> = </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ; </symbol>
	<keyword> while </keyword>
	<symbol> ( </symbol>
	<identifier> i </identifier>
	<symbol> &lt; </symbol>
	<identifier> count </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> temp </identifier>
	<symbol> = </symbol>
	<identifier> bricks </identifier>
	<symbol> [ </symbol>
	<identifier> i </identifier>
	<symbol> ] </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> temp </identifier>
	<symbol> . </symbol>
	<identifier> draw </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> i </identifier>
	<symbol> = </symbol>
	<identifier> i </identifier>
	<symbol> + </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> erase </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> i </identifier>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Screen </identifier>
	<symbol> . </symbol>
	<identifier> setColor </identifier>
	<symbol> ( </symbol>
	<keyword> false </keyword>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> i </identifier>
	<symbol> = </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ; </symbol>
	<keyword> while </keyword>
	<symbol> ( </symbol>
	<identifier> i </identifier>
	<symbol> &lt; </symbol>
	<identifier> count </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> temp </identifier>
	<symbol> = </symbol>
	<identifier> bricks </identifier>
	<symbol> [ </symbol>
	<identifier> i </identifier>
	<symbol> ] </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> temp </identifier>
	<symbol> . </symbol>
	<identifier> erase </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> i </identifier>
	<symbol> = </symbol>
	<identifier> i </identifier>
	<symbol> + </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> moveRight </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> i </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> i </identifier>
	<symbol> = </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ; </symbol>
	<keyword> while </keyword>
	<symbol> ( </symbol>
	<identifier> i </identifier>
	<symbol> &lt; </symbol>
	<identifier> count </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> temp </identifier>
	<symbol> = </symbol>
	<identifier> bricks </identifier>
	<symbol> [ </symbol>
	<identifier> i </identifier>
	<symbol> ] </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> temp </identifier>
	<symbol> . </symbol>
	<identifier> moveRight </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> i </identifier>
	<symbol> = </symbol>
	<identifier> i </identifier>
	<symbol> + </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> moveLeft </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> i </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> i </identifier>
	<symbol> = </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ; </symbol>
	<keyword> while </keyword>
	<symbol> ( </symbol>
	<identifier> i </identifier>
	<symbol> &lt; </symbol>
	<identifier> count </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> temp </identifier>
	<symbol> = </symbol>
	<identifier> bricks </identifier>
	<symbol> [ </symbol>
	<identifier> i </identifier>
	<symbol> ] </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> temp </identifier>
	<symbol> . </symbol>
	<identifier> moveLeft </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> i </identifier>
	<symbol> = </symbol>
	<identifier> i </identifier>
	<symbol> + </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<identifier> Brick </identifier>
	<identifier> getBrick </identifier>
	<symbol> ( </symbol>
	<keyword> int </keyword>
	<identifier> brickID </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> return </keyword>
	<identifier> bricks </identifier>
	<symbol> [ </symbol>
	<identifier> brickID </identifier>
	<symbol> ] </symbol>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> int </keyword>
	<identifier> getCount </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> return </keyword>
	<identifier> count </identifier>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<identifier> Hitbox </identifier>
	<identifier> getHitbox </identifier>
	<symbol> ( </symbol>
	<keyword> int </keyword>
	<identifier> brickID </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> temp </identifier>
	<symbol> = </symbol>
	<identifier> bricks </identifier>
	<symbol> [ </symbol>
	<identifier> brickID </identifier>
	<symbol> ] </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<identifier> temp </identifier>
	<symbol> . </symbol>
	<identifier> getHitbox </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> boolean </keyword>
	<identifier> isDestroyed </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> var </keyword>
	<keyword> boolean </keyword>
	<identifier> destroyed </identifier>
	<symbol> ; </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> count </identifier>
	<symbol> = </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> destroyed </identifier>
	<symbol> = </symbol>
	<keyword> true </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> return </keyword>
	<identifier> destroyed </identifier>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<symbol> } </symbol>
</tokens>