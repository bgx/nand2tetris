<tokens>
	<keyword> class </keyword>
	<identifier> Brick </identifier>
	<symbol> { </symbol>
	<keyword> field </keyword>
	<keyword> int </keyword>
	<identifier> x </identifier>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> ; </symbol>
	<keyword> field </keyword>
	<keyword> int </keyword>
	<identifier> width </identifier>
	<symbol> , </symbol>
	<identifier> height </identifier>
	<symbol> ; </symbol>
	<keyword> field </keyword>
	<identifier> Hitbox </identifier>
	<identifier> hitbox </identifier>
	<symbol> ; </symbol>
	<keyword> field </keyword>
	<keyword> int </keyword>
	<identifier> paw </identifier>
	<symbol> , </symbol>
	<identifier> paxmin </identifier>
	<symbol> , </symbol>
	<identifier> paxmax </identifier>
	<symbol> ; </symbol>
	<keyword> constructor </keyword>
	<identifier> Brick </identifier>
	<identifier> new </identifier>
	<symbol> ( </symbol>
	<keyword> int </keyword>
	<identifier> Ax </identifier>
	<symbol> , </symbol>
	<keyword> int </keyword>
	<identifier> Ay </identifier>
	<symbol> , </symbol>
	<keyword> int </keyword>
	<identifier> Awidth </identifier>
	<symbol> , </symbol>
	<keyword> int </keyword>
	<identifier> Aheight </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> x </identifier>
	<symbol> = </symbol>
	<identifier> Ax </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> y </identifier>
	<symbol> = </symbol>
	<identifier> Ay </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> width </identifier>
	<symbol> = </symbol>
	<identifier> Awidth </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> height </identifier>
	<symbol> = </symbol>
	<identifier> Aheight </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> paw </identifier>
	<symbol> = </symbol>
	<integerConstant> 216 </integerConstant>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> paxmin </identifier>
	<symbol> = </symbol>
	<integerConstant> 255 </integerConstant>
	<symbol> - </symbol>
	<symbol> ( </symbol>
	<identifier> paw </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> + </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> paxmax </identifier>
	<symbol> = </symbol>
	<integerConstant> 256 </integerConstant>
	<symbol> + </symbol>
	<symbol> ( </symbol>
	<identifier> paw </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> - </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> hitbox </identifier>
	<symbol> = </symbol>
	<identifier> Hitbox </identifier>
	<symbol> . </symbol>
	<identifier> new </identifier>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> - </symbol>
	<symbol> ( </symbol>
	<identifier> width </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> , </symbol>
	<identifier> x </identifier>
	<symbol> + </symbol>
	<symbol> ( </symbol>
	<identifier> width </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> - </symbol>
	<symbol> ( </symbol>
	<identifier> height </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> + </symbol>
	<symbol> ( </symbol>
	<identifier> height </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<keyword> this </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> dispose </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> hitbox </identifier>
	<symbol> . </symbol>
	<identifier> dispose </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Memory </identifier>
	<symbol> . </symbol>
	<identifier> deAlloc </identifier>
	<symbol> ( </symbol>
	<keyword> this </keyword>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> draw </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> Screen </identifier>
	<symbol> . </symbol>
	<identifier> setColor </identifier>
	<symbol> ( </symbol>
	<keyword> true </keyword>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<symbol> ( </symbol>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> + </symbol>
	<symbol> ( </symbol>
	<identifier> width </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> &gt; </symbol>
	<identifier> paxmax </identifier>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> Screen </identifier>
	<symbol> . </symbol>
	<identifier> drawRectangle </identifier>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> - </symbol>
	<symbol> ( </symbol>
	<identifier> width </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> - </symbol>
	<symbol> ( </symbol>
	<identifier> height </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> , </symbol>
	<identifier> paxmax </identifier>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> + </symbol>
	<symbol> ( </symbol>
	<identifier> height </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Screen </identifier>
	<symbol> . </symbol>
	<identifier> drawRectangle </identifier>
	<symbol> ( </symbol>
	<identifier> paxmin </identifier>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> - </symbol>
	<symbol> ( </symbol>
	<identifier> height </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> , </symbol>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> - </symbol>
	<identifier> paw </identifier>
	<symbol> ) </symbol>
	<symbol> + </symbol>
	<symbol> ( </symbol>
	<identifier> width </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> + </symbol>
	<symbol> ( </symbol>
	<identifier> height </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> else </keyword>
	<symbol> { </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<symbol> ( </symbol>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> - </symbol>
	<symbol> ( </symbol>
	<identifier> width </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> &lt; </symbol>
	<identifier> paxmin </identifier>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> Screen </identifier>
	<symbol> . </symbol>
	<identifier> drawRectangle </identifier>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> - </symbol>
	<symbol> ( </symbol>
	<identifier> width </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> + </symbol>
	<identifier> paw </identifier>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> - </symbol>
	<symbol> ( </symbol>
	<identifier> height </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> , </symbol>
	<identifier> paxmax </identifier>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> + </symbol>
	<symbol> ( </symbol>
	<identifier> height </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Screen </identifier>
	<symbol> . </symbol>
	<identifier> drawRectangle </identifier>
	<symbol> ( </symbol>
	<identifier> paxmin </identifier>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> - </symbol>
	<symbol> ( </symbol>
	<identifier> height </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> , </symbol>
	<identifier> x </identifier>
	<symbol> + </symbol>
	<symbol> ( </symbol>
	<identifier> width </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> + </symbol>
	<symbol> ( </symbol>
	<identifier> height </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> else </keyword>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> Screen </identifier>
	<symbol> . </symbol>
	<identifier> drawRectangle </identifier>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> - </symbol>
	<symbol> ( </symbol>
	<identifier> width </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> - </symbol>
	<symbol> ( </symbol>
	<identifier> height </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> , </symbol>
	<identifier> x </identifier>
	<symbol> + </symbol>
	<symbol> ( </symbol>
	<identifier> width </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> + </symbol>
	<symbol> ( </symbol>
	<identifier> height </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<symbol> } </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> erase </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> Screen </identifier>
	<symbol> . </symbol>
	<identifier> setColor </identifier>
	<symbol> ( </symbol>
	<keyword> false </keyword>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<symbol> ( </symbol>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> + </symbol>
	<symbol> ( </symbol>
	<identifier> width </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> &gt; </symbol>
	<identifier> paxmax </identifier>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> Screen </identifier>
	<symbol> . </symbol>
	<identifier> drawRectangle </identifier>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> - </symbol>
	<symbol> ( </symbol>
	<identifier> width </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> - </symbol>
	<symbol> ( </symbol>
	<identifier> height </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> , </symbol>
	<identifier> paxmax </identifier>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> + </symbol>
	<symbol> ( </symbol>
	<identifier> height </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Screen </identifier>
	<symbol> . </symbol>
	<identifier> drawRectangle </identifier>
	<symbol> ( </symbol>
	<identifier> paxmin </identifier>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> - </symbol>
	<symbol> ( </symbol>
	<identifier> height </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> , </symbol>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> - </symbol>
	<identifier> paw </identifier>
	<symbol> ) </symbol>
	<symbol> + </symbol>
	<symbol> ( </symbol>
	<identifier> width </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> + </symbol>
	<symbol> ( </symbol>
	<identifier> height </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> else </keyword>
	<symbol> { </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<symbol> ( </symbol>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> - </symbol>
	<symbol> ( </symbol>
	<identifier> width </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> &lt; </symbol>
	<identifier> paxmin </identifier>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> Screen </identifier>
	<symbol> . </symbol>
	<identifier> drawRectangle </identifier>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> - </symbol>
	<symbol> ( </symbol>
	<identifier> width </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> + </symbol>
	<identifier> paw </identifier>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> - </symbol>
	<symbol> ( </symbol>
	<identifier> height </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> , </symbol>
	<identifier> paxmax </identifier>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> + </symbol>
	<symbol> ( </symbol>
	<identifier> height </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Screen </identifier>
	<symbol> . </symbol>
	<identifier> drawRectangle </identifier>
	<symbol> ( </symbol>
	<identifier> paxmin </identifier>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> - </symbol>
	<symbol> ( </symbol>
	<identifier> height </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> , </symbol>
	<identifier> x </identifier>
	<symbol> + </symbol>
	<symbol> ( </symbol>
	<identifier> width </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> + </symbol>
	<symbol> ( </symbol>
	<identifier> height </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> else </keyword>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> Screen </identifier>
	<symbol> . </symbol>
	<identifier> drawRectangle </identifier>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> - </symbol>
	<symbol> ( </symbol>
	<identifier> width </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> - </symbol>
	<symbol> ( </symbol>
	<identifier> height </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> , </symbol>
	<identifier> x </identifier>
	<symbol> + </symbol>
	<symbol> ( </symbol>
	<identifier> width </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> + </symbol>
	<symbol> ( </symbol>
	<identifier> height </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<symbol> } </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<identifier> Hitbox </identifier>
	<identifier> getHitbox </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> return </keyword>
	<identifier> hitbox </identifier>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> moveRight </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> x </identifier>
	<symbol> = </symbol>
	<identifier> x </identifier>
	<symbol> + </symbol>
	<integerConstant> 4 </integerConstant>
	<symbol> ; </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> &gt; </symbol>
	<integerConstant> 363 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> x </identifier>
	<symbol> = </symbol>
	<identifier> x </identifier>
	<symbol> - </symbol>
	<integerConstant> 216 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> do </keyword>
	<identifier> hitbox </identifier>
	<symbol> . </symbol>
	<identifier> update </identifier>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> - </symbol>
	<symbol> ( </symbol>
	<identifier> width </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> , </symbol>
	<identifier> x </identifier>
	<symbol> + </symbol>
	<symbol> ( </symbol>
	<identifier> width </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> - </symbol>
	<symbol> ( </symbol>
	<identifier> height </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> + </symbol>
	<symbol> ( </symbol>
	<identifier> height </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> moveLeft </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> x </identifier>
	<symbol> = </symbol>
	<identifier> x </identifier>
	<symbol> - </symbol>
	<integerConstant> 4 </integerConstant>
	<symbol> ; </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> &lt; </symbol>
	<integerConstant> 148 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> x </identifier>
	<symbol> = </symbol>
	<identifier> x </identifier>
	<symbol> + </symbol>
	<integerConstant> 216 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> do </keyword>
	<identifier> hitbox </identifier>
	<symbol> . </symbol>
	<identifier> update </identifier>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> - </symbol>
	<symbol> ( </symbol>
	<identifier> width </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> , </symbol>
	<identifier> x </identifier>
	<symbol> + </symbol>
	<symbol> ( </symbol>
	<identifier> width </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> - </symbol>
	<symbol> ( </symbol>
	<identifier> height </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> + </symbol>
	<symbol> ( </symbol>
	<identifier> height </identifier>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<symbol> } </symbol>
</tokens>