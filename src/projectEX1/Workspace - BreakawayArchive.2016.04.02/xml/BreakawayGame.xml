<class>
	<keyword> class </keyword>
	<identifier> BreakawayGame </identifier>
	class : defined
	<symbol> { </symbol>
	<classVarDec>
		<keyword> field </keyword>
		<identifier> PlayArea </identifier>
		class : used
		<identifier> playarea </identifier>
		field : defined : field 0
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<identifier> Ball </identifier>
		class : used
		<identifier> ball </identifier>
		field : defined : field 1
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<identifier> Paddle </identifier>
		class : used
		<identifier> paddle </identifier>
		field : defined : field 2
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<identifier> Wall </identifier>
		class : used
		<identifier> wall </identifier>
		field : defined : field 3
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier> lives </identifier>
		field : defined : field 4
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier> score </identifier>
		field : defined : field 5
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> char </keyword>
		<identifier> key </identifier>
		field : defined : field 6
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier> state </identifier>
		field : defined : field 7
		<symbol> ; </symbol>
	</classVarDec>
	<subroutineDec>
		<keyword> constructor </keyword>
		<identifier> BreakawayGame </identifier>
		class : used
		<identifier> new </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> state </identifier>
					field : used : field 7
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<returnStatement>
					<keyword> return </keyword>
					<expression>
						<term>
							<keyword> this </keyword>
						</term>
					</expression>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> dispose </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier> playarea </identifier>
					field : used : field 0
					<symbol> . </symbol>
					<identifier> dispose </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> ball </identifier>
					field : used : field 1
					<symbol> . </symbol>
					<identifier> dispose </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> paddle </identifier>
					field : used : field 2
					<symbol> . </symbol>
					<identifier> dispose </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> wall </identifier>
					field : used : field 3
					<symbol> . </symbol>
					<identifier> dispose </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Memory </identifier>
					class : used
					<symbol> . </symbol>
					<identifier> deAlloc </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<keyword> this </keyword>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> run </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<keyword> true </keyword>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> state </identifier>
									field : used : field 7
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 0 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<doStatement>
									<keyword> do </keyword>
									<identifier> printStartScreen </identifier>
									subroutine : used
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier> waitSpacePressed </identifier>
									subroutine : used
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier> initializeGameLoop </identifier>
									subroutine : used
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
							</statements>
							<symbol> } </symbol>
							<keyword> else </keyword>
							<symbol> { </symbol>
							<statements>
								<ifStatement>
									<keyword> if </keyword>
									<symbol> ( </symbol>
									<expression>
										<term>
											<identifier> state </identifier>
											field : used : field 7
										</term>
										<symbol> = </symbol>
										<term>
											<integerConstant> 1 </integerConstant>
										</term>
									</expression>
									<symbol> ) </symbol>
									<symbol> { </symbol>
									<statements>
										<doStatement>
											<keyword> do </keyword>
											<identifier> Screen </identifier>
											class : used
											<symbol> . </symbol>
											<identifier> clearScreen </identifier>
											subroutine : used
											<symbol> ( </symbol>
											<expressionList>
											</expressionList>
											<symbol> ) </symbol>
											<symbol> ; </symbol>
										</doStatement>
										<doStatement>
											<keyword> do </keyword>
											<identifier> initializeComponents </identifier>
											subroutine : used
											<symbol> ( </symbol>
											<expressionList>
											</expressionList>
											<symbol> ) </symbol>
											<symbol> ; </symbol>
										</doStatement>
										<whileStatement>
											<keyword> while </keyword>
											<symbol> ( </symbol>
											<expression>
												<term>
													<identifier> state </identifier>
													field : used : field 7
												</term>
												<symbol> = </symbol>
												<term>
													<integerConstant> 1 </integerConstant>
												</term>
											</expression>
											<symbol> ) </symbol>
											<symbol> { </symbol>
											<statements>
												<doStatement>
													<keyword> do </keyword>
													<identifier> processInput </identifier>
													subroutine : used
													<symbol> ( </symbol>
													<expressionList>
													</expressionList>
													<symbol> ) </symbol>
													<symbol> ; </symbol>
												</doStatement>
												<doStatement>
													<keyword> do </keyword>
													<identifier> update </identifier>
													subroutine : used
													<symbol> ( </symbol>
													<expressionList>
													</expressionList>
													<symbol> ) </symbol>
													<symbol> ; </symbol>
												</doStatement>
												<doStatement>
													<keyword> do </keyword>
													<identifier> render </identifier>
													subroutine : used
													<symbol> ( </symbol>
													<expressionList>
													</expressionList>
													<symbol> ) </symbol>
													<symbol> ; </symbol>
												</doStatement>
											</statements>
											<symbol> } </symbol>
										</whileStatement>
										<doStatement>
											<keyword> do </keyword>
											<identifier> disposeComponents </identifier>
											subroutine : used
											<symbol> ( </symbol>
											<expressionList>
											</expressionList>
											<symbol> ) </symbol>
											<symbol> ; </symbol>
										</doStatement>
									</statements>
									<symbol> } </symbol>
									<keyword> else </keyword>
									<symbol> { </symbol>
									<statements>
										<ifStatement>
											<keyword> if </keyword>
											<symbol> ( </symbol>
											<expression>
												<term>
													<identifier> state </identifier>
													field : used : field 7
												</term>
												<symbol> = </symbol>
												<term>
													<integerConstant> 2 </integerConstant>
												</term>
											</expression>
											<symbol> ) </symbol>
											<symbol> { </symbol>
											<statements>
												<doStatement>
													<keyword> do </keyword>
													<identifier> printLives </identifier>
													subroutine : used
													<symbol> ( </symbol>
													<expressionList>
													</expressionList>
													<symbol> ) </symbol>
													<symbol> ; </symbol>
												</doStatement>
												<doStatement>
													<keyword> do </keyword>
													<identifier> printLostLife </identifier>
													subroutine : used
													<symbol> ( </symbol>
													<expressionList>
													</expressionList>
													<symbol> ) </symbol>
													<symbol> ; </symbol>
												</doStatement>
												<doStatement>
													<keyword> do </keyword>
													<identifier> waitSpacePressed </identifier>
													subroutine : used
													<symbol> ( </symbol>
													<expressionList>
													</expressionList>
													<symbol> ) </symbol>
													<symbol> ; </symbol>
												</doStatement>
											</statements>
											<symbol> } </symbol>
											<keyword> else </keyword>
											<symbol> { </symbol>
											<statements>
												<ifStatement>
													<keyword> if </keyword>
													<symbol> ( </symbol>
													<expression>
														<term>
															<identifier> state </identifier>
															field : used : field 7
														</term>
														<symbol> = </symbol>
														<term>
															<integerConstant> 3 </integerConstant>
														</term>
													</expression>
													<symbol> ) </symbol>
													<symbol> { </symbol>
													<statements>
														<doStatement>
															<keyword> do </keyword>
															<identifier> printGameOver </identifier>
															subroutine : used
															<symbol> ( </symbol>
															<expressionList>
															</expressionList>
															<symbol> ) </symbol>
															<symbol> ; </symbol>
														</doStatement>
														<doStatement>
															<keyword> do </keyword>
															<identifier> waitSpacePressed </identifier>
															subroutine : used
															<symbol> ( </symbol>
															<expressionList>
															</expressionList>
															<symbol> ) </symbol>
															<symbol> ; </symbol>
														</doStatement>
													</statements>
													<symbol> } </symbol>
													<keyword> else </keyword>
													<symbol> { </symbol>
													<statements>
														<ifStatement>
															<keyword> if </keyword>
															<symbol> ( </symbol>
															<expression>
																<term>
																	<identifier> state </identifier>
																	field : used : field 7
																</term>
																<symbol> = </symbol>
																<term>
																	<integerConstant> 4 </integerConstant>
																</term>
															</expression>
															<symbol> ) </symbol>
															<symbol> { </symbol>
															<statements>
																<doStatement>
																	<keyword> do </keyword>
																	<identifier> printYouWin </identifier>
																	subroutine : used
																	<symbol> ( </symbol>
																	<expressionList>
																	</expressionList>
																	<symbol> ) </symbol>
																	<symbol> ; </symbol>
																</doStatement>
																<doStatement>
																	<keyword> do </keyword>
																	<identifier> waitSpacePressed </identifier>
																	subroutine : used
																	<symbol> ( </symbol>
																	<expressionList>
																	</expressionList>
																	<symbol> ) </symbol>
																	<symbol> ; </symbol>
																</doStatement>
															</statements>
															<symbol> } </symbol>
														</ifStatement>
													</statements>
													<symbol> } </symbol>
												</ifStatement>
											</statements>
											<symbol> } </symbol>
										</ifStatement>
									</statements>
									<symbol> } </symbol>
								</ifStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> waitSpacePressed </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ~ </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<identifier> Keyboard </identifier>
										class : used
										<symbol> . </symbol>
										<identifier> keyPressed </identifier>
										subroutine : used
										<symbol> ( </symbol>
										<expressionList>
										</expressionList>
										<symbol> ) </symbol>
									</term>
									<symbol> = </symbol>
									<term>
										<integerConstant> 32 </integerConstant>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> state </identifier>
									field : used : field 7
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 0 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
						</term>
						<symbol> | </symbol>
						<term>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> state </identifier>
									field : used : field 7
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 2 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> state </identifier>
							field : used : field 7
							<symbol> = </symbol>
							<expression>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
					<keyword> else </keyword>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> state </identifier>
							field : used : field 7
							<symbol> = </symbol>
							<expression>
								<term>
									<integerConstant> 0 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> Keyboard </identifier>
									class : used
									<symbol> . </symbol>
									<identifier> keyPressed </identifier>
									subroutine : used
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 32 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> initializeGameLoop </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> lives </identifier>
					field : used : field 4
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 2 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> wall </identifier>
					field : used : field 3
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> Wall </identifier>
							class : used
							<symbol> . </symbol>
							<identifier> new </identifier>
							subroutine : used
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> wall </identifier>
					field : used : field 3
					<symbol> . </symbol>
					<identifier> newBrickGroup </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<integerConstant> 176 </integerConstant>
							</term>
						</expression>
						<symbol> , </symbol>
						<expression>
							<term>
								<integerConstant> 50 </integerConstant>
							</term>
						</expression>
						<symbol> , </symbol>
						<expression>
							<term>
								<integerConstant> 30 </integerConstant>
							</term>
						</expression>
						<symbol> , </symbol>
						<expression>
							<term>
								<integerConstant> 10 </integerConstant>
							</term>
						</expression>
						<symbol> , </symbol>
						<expression>
							<term>
								<integerConstant> 32 </integerConstant>
							</term>
						</expression>
						<symbol> , </symbol>
						<expression>
							<term>
								<integerConstant> 12 </integerConstant>
							</term>
						</expression>
						<symbol> , </symbol>
						<expression>
							<term>
								<integerConstant> 1 </integerConstant>
							</term>
						</expression>
						<symbol> , </symbol>
						<expression>
							<term>
								<integerConstant> 6 </integerConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> initializeComponents </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> playarea </identifier>
					field : used : field 0
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> PlayArea </identifier>
							class : used
							<symbol> . </symbol>
							<identifier> new </identifier>
							subroutine : used
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<integerConstant> 216 </integerConstant>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 252 </integerConstant>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> ball </identifier>
					field : used : field 1
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> Ball </identifier>
							class : used
							<symbol> . </symbol>
							<identifier> new </identifier>
							subroutine : used
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<integerConstant> 250 </integerConstant>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 100 </integerConstant>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 2 </integerConstant>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 3 </integerConstant>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 6 </integerConstant>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> paddle </identifier>
					field : used : field 2
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> Paddle </identifier>
							class : used
							<symbol> . </symbol>
							<identifier> new </identifier>
							subroutine : used
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<integerConstant> 255 </integerConstant>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 220 </integerConstant>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 25 </integerConstant>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 7 </integerConstant>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> printLives </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> disposeComponents </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier> playarea </identifier>
					field : used : field 0
					<symbol> . </symbol>
					<identifier> dispose </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> ball </identifier>
					field : used : field 1
					<symbol> . </symbol>
					<identifier> dispose </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> paddle </identifier>
					field : used : field 2
					<symbol> . </symbol>
					<identifier> dispose </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> printMessage </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
			<identifier> String </identifier>
			class : used
			<identifier> s </identifier>
			argument : defined : argument 1
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Output </identifier>
					class : used
					<symbol> . </symbol>
					<identifier> moveCursor </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<integerConstant> 8 </integerConstant>
							</term>
						</expression>
						<symbol> , </symbol>
						<expression>
							<term>
								<integerConstant> 27 </integerConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Output </identifier>
					class : used
					<symbol> . </symbol>
					<identifier> printString </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> s </identifier>
								argument : used : argument 1
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> s </identifier>
					argument : used : argument 1
					<symbol> = </symbol>
					<expression>
						<term>
							<stringConstant> Press Spacebar to Play </stringConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Output </identifier>
					class : used
					<symbol> . </symbol>
					<identifier> moveCursor </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<integerConstant> 14 </integerConstant>
							</term>
						</expression>
						<symbol> , </symbol>
						<expression>
							<term>
								<integerConstant> 21 </integerConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Output </identifier>
					class : used
					<symbol> . </symbol>
					<identifier> printString </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> s </identifier>
								argument : used : argument 1
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> printStartScreen </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<identifier> String </identifier>
				class : used
				<identifier> s </identifier>
				var : defined : var 0
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Screen </identifier>
					class : used
					<symbol> . </symbol>
					<identifier> clearScreen </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> s </identifier>
					var : used : var 0
					<symbol> = </symbol>
					<expression>
						<term>
							<stringConstant>  Breakaway </stringConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> printMessage </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> s </identifier>
								var : used : var 0
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> printYouWin </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<identifier> String </identifier>
				class : used
				<identifier> s </identifier>
				var : defined : var 0
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> s </identifier>
					var : used : var 0
					<symbol> = </symbol>
					<expression>
						<term>
							<stringConstant>  You Win!! </stringConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> printMessage </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> s </identifier>
								var : used : var 0
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> printLostLife </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<identifier> String </identifier>
				class : used
				<identifier> s </identifier>
				var : defined : var 0
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> s </identifier>
					var : used : var 0
					<symbol> = </symbol>
					<expression>
						<term>
							<stringConstant> Lost a life </stringConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> printMessage </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> s </identifier>
								var : used : var 0
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> printGameOver </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<identifier> String </identifier>
				class : used
				<identifier> s </identifier>
				var : defined : var 0
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> s </identifier>
					var : used : var 0
					<symbol> = </symbol>
					<expression>
						<term>
							<stringConstant>  Game Over </stringConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> printMessage </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> s </identifier>
								var : used : var 0
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> printLives </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<identifier> String </identifier>
				class : used
				<identifier> s </identifier>
				var : defined : var 0
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> s </identifier>
					var : used : var 0
					<symbol> = </symbol>
					<expression>
						<term>
							<stringConstant> Lives:  </stringConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Output </identifier>
					class : used
					<symbol> . </symbol>
					<identifier> moveCursor </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<integerConstant> 1 </integerConstant>
							</term>
						</expression>
						<symbol> , </symbol>
						<expression>
							<term>
								<integerConstant> 0 </integerConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Output </identifier>
					class : used
					<symbol> . </symbol>
					<identifier> printString </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> s </identifier>
								var : used : var 0
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Output </identifier>
					class : used
					<symbol> . </symbol>
					<identifier> printInt </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> lives </identifier>
								field : used : field 4
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> processInput </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> key </identifier>
					field : used : field 6
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> Keyboard </identifier>
							class : used
							<symbol> . </symbol>
							<identifier> keyPressed </identifier>
							subroutine : used
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> update </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<identifier> Hitbox </identifier>
				class : used
				<identifier> ballh </identifier>
				var : defined : var 0
				<symbol> , </symbol>
				<identifier> playareah </identifier>
				var : defined : var 1
				<symbol> , </symbol>
				<identifier> paddleh </identifier>
				var : defined : var 2
				<symbol> , </symbol>
				<identifier> brickh </identifier>
				var : defined : var 3
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> count </identifier>
				var : defined : var 4
				<symbol> , </symbol>
				<identifier> i </identifier>
				var : defined : var 5
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> a </identifier>
				var : defined : var 6
				<symbol> , </symbol>
				<identifier> b </identifier>
				var : defined : var 7
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier> wall </identifier>
					field : used : field 3
					<symbol> . </symbol>
					<identifier> moveRight </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> playareah </identifier>
					var : used : var 1
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> playarea </identifier>
							field : used : field 0
							<symbol> . </symbol>
							<identifier> getHitbox </identifier>
							subroutine : used
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier> key </identifier>
							field : used : field 6
						</term>
						<symbol> = </symbol>
						<term>
							<integerConstant> 81 </integerConstant>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> state </identifier>
							field : used : field 7
							<symbol> = </symbol>
							<expression>
								<term>
									<integerConstant> 0 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier> key </identifier>
							field : used : field 6
						</term>
						<symbol> = </symbol>
						<term>
							<integerConstant> 130 </integerConstant>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<doStatement>
							<keyword> do </keyword>
							<identifier> paddle </identifier>
							field : used : field 2
							<symbol> . </symbol>
							<identifier> moveLeftSim </identifier>
							subroutine : used
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
							<symbol> ; </symbol>
						</doStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> paddleh </identifier>
							var : used : var 2
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> paddle </identifier>
									field : used : field 2
									<symbol> . </symbol>
									<identifier> getHitbox </identifier>
									subroutine : used
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<symbol> ~ </symbol>
									<term>
										<symbol> ( </symbol>
										<expression>
											<term>
												<identifier> paddleh </identifier>
												var : used : var 2
												<symbol> . </symbol>
												<identifier> getXmin </identifier>
												subroutine : used
												<symbol> ( </symbol>
												<expressionList>
												</expressionList>
												<symbol> ) </symbol>
											</term>
											<symbol> &lt; </symbol>
											<term>
												<identifier> playareah </identifier>
												var : used : var 1
												<symbol> . </symbol>
												<identifier> getXmin </identifier>
												subroutine : used
												<symbol> ( </symbol>
												<expressionList>
												</expressionList>
												<symbol> ) </symbol>
											</term>
										</expression>
										<symbol> ) </symbol>
									</term>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<doStatement>
									<keyword> do </keyword>
									<identifier> paddle </identifier>
									field : used : field 2
									<symbol> . </symbol>
									<identifier> moveLeft </identifier>
									subroutine : used
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
					</statements>
					<symbol> } </symbol>
					<keyword> else </keyword>
					<symbol> { </symbol>
					<statements>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> key </identifier>
									field : used : field 6
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 132 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<doStatement>
									<keyword> do </keyword>
									<identifier> paddle </identifier>
									field : used : field 2
									<symbol> . </symbol>
									<identifier> moveRightSim </identifier>
									subroutine : used
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
								<letStatement>
									<keyword> let </keyword>
									<identifier> paddleh </identifier>
									var : used : var 2
									<symbol> = </symbol>
									<expression>
										<term>
											<identifier> paddle </identifier>
											field : used : field 2
											<symbol> . </symbol>
											<identifier> getHitbox </identifier>
											subroutine : used
											<symbol> ( </symbol>
											<expressionList>
											</expressionList>
											<symbol> ) </symbol>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<ifStatement>
									<keyword> if </keyword>
									<symbol> ( </symbol>
									<expression>
										<term>
											<symbol> ~ </symbol>
											<term>
												<symbol> ( </symbol>
												<expression>
													<term>
														<identifier> paddleh </identifier>
														var : used : var 2
														<symbol> . </symbol>
														<identifier> getXmax </identifier>
														subroutine : used
														<symbol> ( </symbol>
														<expressionList>
														</expressionList>
														<symbol> ) </symbol>
													</term>
													<symbol> &gt; </symbol>
													<term>
														<identifier> playareah </identifier>
														var : used : var 1
														<symbol> . </symbol>
														<identifier> getXmax </identifier>
														subroutine : used
														<symbol> ( </symbol>
														<expressionList>
														</expressionList>
														<symbol> ) </symbol>
													</term>
												</expression>
												<symbol> ) </symbol>
											</term>
										</term>
									</expression>
									<symbol> ) </symbol>
									<symbol> { </symbol>
									<statements>
										<doStatement>
											<keyword> do </keyword>
											<identifier> paddle </identifier>
											field : used : field 2
											<symbol> . </symbol>
											<identifier> moveRight </identifier>
											subroutine : used
											<symbol> ( </symbol>
											<expressionList>
											</expressionList>
											<symbol> ) </symbol>
											<symbol> ; </symbol>
										</doStatement>
									</statements>
									<symbol> } </symbol>
								</ifStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> ball </identifier>
					field : used : field 1
					<symbol> . </symbol>
					<identifier> moveBallSim </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> ballh </identifier>
					var : used : var 0
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> ball </identifier>
							field : used : field 1
							<symbol> . </symbol>
							<identifier> getHitbox </identifier>
							subroutine : used
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> paddleh </identifier>
					var : used : var 2
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> paddle </identifier>
							field : used : field 2
							<symbol> . </symbol>
							<identifier> getHitbox </identifier>
							subroutine : used
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> ballh </identifier>
									var : used : var 0
									<symbol> . </symbol>
									<identifier> getXmin </identifier>
									subroutine : used
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
								</term>
								<symbol> &lt; </symbol>
								<term>
									<identifier> playareah </identifier>
									var : used : var 1
									<symbol> . </symbol>
									<identifier> getXmin </identifier>
									subroutine : used
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ) </symbol>
						</term>
						<symbol> | </symbol>
						<term>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> ballh </identifier>
									var : used : var 0
									<symbol> . </symbol>
									<identifier> getXmax </identifier>
									subroutine : used
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
								</term>
								<symbol> &gt; </symbol>
								<term>
									<identifier> playareah </identifier>
									var : used : var 1
									<symbol> . </symbol>
									<identifier> getXmax </identifier>
									subroutine : used
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<doStatement>
							<keyword> do </keyword>
							<identifier> ball </identifier>
							field : used : field 1
							<symbol> . </symbol>
							<identifier> flipDeltaX </identifier>
							subroutine : used
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
							<symbol> ; </symbol>
						</doStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier> ballh </identifier>
							var : used : var 0
							<symbol> . </symbol>
							<identifier> getYmin </identifier>
							subroutine : used
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
						</term>
						<symbol> &lt; </symbol>
						<term>
							<identifier> playareah </identifier>
							var : used : var 1
							<symbol> . </symbol>
							<identifier> getYmin </identifier>
							subroutine : used
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<doStatement>
							<keyword> do </keyword>
							<identifier> ball </identifier>
							field : used : field 1
							<symbol> . </symbol>
							<identifier> flipDeltaY </identifier>
							subroutine : used
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
							<symbol> ; </symbol>
						</doStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier> ballh </identifier>
							var : used : var 0
							<symbol> . </symbol>
							<identifier> getYmax </identifier>
							subroutine : used
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
						</term>
						<symbol> &gt; </symbol>
						<term>
							<identifier> playareah </identifier>
							var : used : var 1
							<symbol> . </symbol>
							<identifier> getYmax </identifier>
							subroutine : used
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<doStatement>
							<keyword> do </keyword>
							<identifier> ball </identifier>
							field : used : field 1
							<symbol> . </symbol>
							<identifier> flipDeltaY </identifier>
							subroutine : used
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
							<symbol> ; </symbol>
						</doStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> lives </identifier>
							field : used : field 4
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> lives </identifier>
									field : used : field 4
								</term>
								<symbol> - </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> lives </identifier>
									field : used : field 4
								</term>
								<symbol> &lt; </symbol>
								<term>
									<integerConstant> 0 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> state </identifier>
									field : used : field 7
									<symbol> = </symbol>
									<expression>
										<term>
											<integerConstant> 3 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
							<keyword> else </keyword>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> state </identifier>
									field : used : field 7
									<symbol> = </symbol>
									<expression>
										<term>
											<integerConstant> 2 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> ballh </identifier>
									var : used : var 0
									<symbol> . </symbol>
									<identifier> getYmax </identifier>
									subroutine : used
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
								</term>
								<symbol> &gt; </symbol>
								<term>
									<identifier> paddleh </identifier>
									var : used : var 2
									<symbol> . </symbol>
									<identifier> getYmin </identifier>
									subroutine : used
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ) </symbol>
						</term>
						<symbol> &amp; </symbol>
						<term>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> ballh </identifier>
									var : used : var 0
									<symbol> . </symbol>
									<identifier> getYmin </identifier>
									subroutine : used
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
								</term>
								<symbol> &lt; </symbol>
								<term>
									<identifier> paddleh </identifier>
									var : used : var 2
									<symbol> . </symbol>
									<identifier> getYmax </identifier>
									subroutine : used
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ) </symbol>
						</term>
						<symbol> &amp; </symbol>
						<term>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> ballh </identifier>
									var : used : var 0
									<symbol> . </symbol>
									<identifier> getXmax </identifier>
									subroutine : used
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
								</term>
								<symbol> &gt; </symbol>
								<term>
									<identifier> paddleh </identifier>
									var : used : var 2
									<symbol> . </symbol>
									<identifier> getXmin </identifier>
									subroutine : used
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ) </symbol>
						</term>
						<symbol> &amp; </symbol>
						<term>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> ballh </identifier>
									var : used : var 0
									<symbol> . </symbol>
									<identifier> getXmin </identifier>
									subroutine : used
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
								</term>
								<symbol> &lt; </symbol>
								<term>
									<identifier> paddleh </identifier>
									var : used : var 2
									<symbol> . </symbol>
									<identifier> getXmax </identifier>
									subroutine : used
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> a </identifier>
							var : used : var 6
							<symbol> = </symbol>
							<expression>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<identifier> paddleh </identifier>
											var : used : var 2
											<symbol> . </symbol>
											<identifier> getXmax </identifier>
											subroutine : used
											<symbol> ( </symbol>
											<expressionList>
											</expressionList>
											<symbol> ) </symbol>
										</term>
										<symbol> + </symbol>
										<term>
											<identifier> paddleh </identifier>
											var : used : var 2
											<symbol> . </symbol>
											<identifier> getXmin </identifier>
											subroutine : used
											<symbol> ( </symbol>
											<expressionList>
											</expressionList>
											<symbol> ) </symbol>
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
								<symbol> / </symbol>
								<term>
									<integerConstant> 2 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> b </identifier>
							var : used : var 7
							<symbol> = </symbol>
							<expression>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<identifier> ballh </identifier>
											var : used : var 0
											<symbol> . </symbol>
											<identifier> getXmax </identifier>
											subroutine : used
											<symbol> ( </symbol>
											<expressionList>
											</expressionList>
											<symbol> ) </symbol>
										</term>
										<symbol> + </symbol>
										<term>
											<identifier> ballh </identifier>
											var : used : var 0
											<symbol> . </symbol>
											<identifier> getXmin </identifier>
											subroutine : used
											<symbol> ( </symbol>
											<expressionList>
											</expressionList>
											<symbol> ) </symbol>
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
								<symbol> / </symbol>
								<term>
									<integerConstant> 2 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<doStatement>
							<keyword> do </keyword>
							<identifier> ball </identifier>
							field : used : field 1
							<symbol> . </symbol>
							<identifier> setDelta </identifier>
							subroutine : used
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<identifier> b </identifier>
										var : used : var 7
									</term>
									<symbol> - </symbol>
									<term>
										<identifier> a </identifier>
										var : used : var 6
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
							<symbol> ; </symbol>
						</doStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> count </identifier>
					var : used : var 4
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> wall </identifier>
							field : used : field 3
							<symbol> . </symbol>
							<identifier> getCount </identifier>
							subroutine : used
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> i </identifier>
					var : used : var 5
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier> i </identifier>
							var : used : var 5
						</term>
						<symbol> &lt; </symbol>
						<term>
							<identifier> count </identifier>
							var : used : var 4
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> brickh </identifier>
							var : used : var 3
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> wall </identifier>
									field : used : field 3
									<symbol> . </symbol>
									<identifier> getHitbox </identifier>
									subroutine : used
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<identifier> i </identifier>
												var : used : var 5
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<symbol> ( </symbol>
											<expression>
												<term>
													<identifier> ballh </identifier>
													var : used : var 0
													<symbol> . </symbol>
													<identifier> getXmax </identifier>
													subroutine : used
													<symbol> ( </symbol>
													<expressionList>
													</expressionList>
													<symbol> ) </symbol>
												</term>
												<symbol> &gt; </symbol>
												<term>
													<identifier> brickh </identifier>
													var : used : var 3
													<symbol> . </symbol>
													<identifier> getXmin </identifier>
													subroutine : used
													<symbol> ( </symbol>
													<expressionList>
													</expressionList>
													<symbol> ) </symbol>
												</term>
											</expression>
											<symbol> ) </symbol>
										</term>
										<symbol> &amp; </symbol>
										<term>
											<symbol> ( </symbol>
											<expression>
												<term>
													<identifier> ballh </identifier>
													var : used : var 0
													<symbol> . </symbol>
													<identifier> getXmin </identifier>
													subroutine : used
													<symbol> ( </symbol>
													<expressionList>
													</expressionList>
													<symbol> ) </symbol>
												</term>
												<symbol> &lt; </symbol>
												<term>
													<identifier> brickh </identifier>
													var : used : var 3
													<symbol> . </symbol>
													<identifier> getXmax </identifier>
													subroutine : used
													<symbol> ( </symbol>
													<expressionList>
													</expressionList>
													<symbol> ) </symbol>
												</term>
											</expression>
											<symbol> ) </symbol>
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
								<symbol> &amp; </symbol>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<symbol> ( </symbol>
											<expression>
												<term>
													<symbol> ( </symbol>
													<expression>
														<term>
															<identifier> ballh </identifier>
															var : used : var 0
															<symbol> . </symbol>
															<identifier> getYmax </identifier>
															subroutine : used
															<symbol> ( </symbol>
															<expressionList>
															</expressionList>
															<symbol> ) </symbol>
														</term>
														<symbol> &gt; </symbol>
														<term>
															<identifier> brickh </identifier>
															var : used : var 3
															<symbol> . </symbol>
															<identifier> getYmin </identifier>
															subroutine : used
															<symbol> ( </symbol>
															<expressionList>
															</expressionList>
															<symbol> ) </symbol>
														</term>
													</expression>
													<symbol> ) </symbol>
												</term>
												<symbol> &amp; </symbol>
												<term>
													<symbol> ( </symbol>
													<expression>
														<term>
															<identifier> ballh </identifier>
															var : used : var 0
															<symbol> . </symbol>
															<identifier> getYmax </identifier>
															subroutine : used
															<symbol> ( </symbol>
															<expressionList>
															</expressionList>
															<symbol> ) </symbol>
														</term>
														<symbol> &lt; </symbol>
														<term>
															<identifier> brickh </identifier>
															var : used : var 3
															<symbol> . </symbol>
															<identifier> getYmax </identifier>
															subroutine : used
															<symbol> ( </symbol>
															<expressionList>
															</expressionList>
															<symbol> ) </symbol>
														</term>
													</expression>
													<symbol> ) </symbol>
												</term>
											</expression>
											<symbol> ) </symbol>
										</term>
										<symbol> | </symbol>
										<term>
											<symbol> ( </symbol>
											<expression>
												<term>
													<symbol> ( </symbol>
													<expression>
														<term>
															<identifier> ballh </identifier>
															var : used : var 0
															<symbol> . </symbol>
															<identifier> getYmin </identifier>
															subroutine : used
															<symbol> ( </symbol>
															<expressionList>
															</expressionList>
															<symbol> ) </symbol>
														</term>
														<symbol> &lt; </symbol>
														<term>
															<identifier> brickh </identifier>
															var : used : var 3
															<symbol> . </symbol>
															<identifier> getYmax </identifier>
															subroutine : used
															<symbol> ( </symbol>
															<expressionList>
															</expressionList>
															<symbol> ) </symbol>
														</term>
													</expression>
													<symbol> ) </symbol>
												</term>
												<symbol> &amp; </symbol>
												<term>
													<symbol> ( </symbol>
													<expression>
														<term>
															<identifier> ballh </identifier>
															var : used : var 0
															<symbol> . </symbol>
															<identifier> getYmin </identifier>
															subroutine : used
															<symbol> ( </symbol>
															<expressionList>
															</expressionList>
															<symbol> ) </symbol>
														</term>
														<symbol> &gt; </symbol>
														<term>
															<identifier> brickh </identifier>
															var : used : var 3
															<symbol> . </symbol>
															<identifier> getYmin </identifier>
															subroutine : used
															<symbol> ( </symbol>
															<expressionList>
															</expressionList>
															<symbol> ) </symbol>
														</term>
													</expression>
													<symbol> ) </symbol>
												</term>
											</expression>
											<symbol> ) </symbol>
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<doStatement>
									<keyword> do </keyword>
									<identifier> ball </identifier>
									field : used : field 1
									<symbol> . </symbol>
									<identifier> flipDeltaY </identifier>
									subroutine : used
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier> wall </identifier>
									field : used : field 3
									<symbol> . </symbol>
									<identifier> destroyBrick </identifier>
									subroutine : used
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<identifier> i </identifier>
												var : used : var 5
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> i </identifier>
							var : used : var 5
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> i </identifier>
									var : used : var 5
								</term>
								<symbol> + </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier> wall </identifier>
							field : used : field 3
							<symbol> . </symbol>
							<identifier> isDestroyed </identifier>
							subroutine : used
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> state </identifier>
							field : used : field 7
							<symbol> = </symbol>
							<expression>
								<term>
									<integerConstant> 4 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> ball </identifier>
					field : used : field 1
					<symbol> . </symbol>
					<identifier> moveBall </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> ballh </identifier>
					var : used : var 0
					<symbol> . </symbol>
					<identifier> dispose </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> playareah </identifier>
					var : used : var 1
					<symbol> . </symbol>
					<identifier> dispose </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> paddleh </identifier>
					var : used : var 2
					<symbol> . </symbol>
					<identifier> dispose </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> render </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier> playarea </identifier>
					field : used : field 0
					<symbol> . </symbol>
					<identifier> clear </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> paddle </identifier>
					field : used : field 2
					<symbol> . </symbol>
					<identifier> draw </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> ball </identifier>
					field : used : field 1
					<symbol> . </symbol>
					<identifier> draw </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> wall </identifier>
					field : used : field 3
					<symbol> . </symbol>
					<identifier> draw </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<symbol> } </symbol>
</class>
