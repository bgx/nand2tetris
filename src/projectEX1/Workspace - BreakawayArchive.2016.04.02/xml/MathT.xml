<tokens>
	<keyword> class </keyword>
	<identifier> Math </identifier>
	<symbol> { </symbol>
	<keyword> static </keyword>
	<identifier> Array </identifier>
	<identifier> twoToThe </identifier>
	<symbol> ; </symbol>
	<keyword> static </keyword>
	<identifier> Array </identifier>
	<identifier> shiftedY </identifier>
	<symbol> ; </symbol>
	<keyword> function </keyword>
	<keyword> void </keyword>
	<identifier> init </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> i </identifier>
	<symbol> ; </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> n </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> i </identifier>
	<symbol> = </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> n </identifier>
	<symbol> = </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> twoToThe </identifier>
	<symbol> = </symbol>
	<identifier> Array </identifier>
	<symbol> . </symbol>
	<identifier> new </identifier>
	<symbol> ( </symbol>
	<integerConstant> 16 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> while </keyword>
	<symbol> ( </symbol>
	<identifier> i </identifier>
	<symbol> &lt; </symbol>
	<integerConstant> 16 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> twoToThe </identifier>
	<symbol> [ </symbol>
	<identifier> i </identifier>
	<symbol> ] </symbol>
	<symbol> = </symbol>
	<identifier> n </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> n </identifier>
	<symbol> = </symbol>
	<identifier> n </identifier>
	<symbol> + </symbol>
	<identifier> n </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> i </identifier>
	<symbol> = </symbol>
	<identifier> i </identifier>
	<symbol> + </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> let </keyword>
	<identifier> shiftedY </identifier>
	<symbol> = </symbol>
	<identifier> Array </identifier>
	<symbol> . </symbol>
	<identifier> new </identifier>
	<symbol> ( </symbol>
	<integerConstant> 16 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> function </keyword>
	<keyword> int </keyword>
	<identifier> abs </identifier>
	<symbol> ( </symbol>
	<keyword> int </keyword>
	<identifier> x </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> &lt; </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> = </symbol>
	<symbol> ( </symbol>
	<integerConstant> 32767 </integerConstant>
	<symbol> + </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> return </keyword>
	<keyword> null </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> return </keyword>
	<symbol> - </symbol>
	<identifier> x </identifier>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> return </keyword>
	<identifier> x </identifier>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> function </keyword>
	<keyword> int </keyword>
	<identifier> multiply </identifier>
	<symbol> ( </symbol>
	<keyword> int </keyword>
	<identifier> x </identifier>
	<symbol> , </symbol>
	<keyword> int </keyword>
	<identifier> y </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> flipSign </identifier>
	<symbol> ; </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> sum </identifier>
	<symbol> ; </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> shiftedX </identifier>
	<symbol> ; </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> j </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> flipSign </identifier>
	<symbol> = </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ; </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> &lt; </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> x </identifier>
	<symbol> = </symbol>
	<symbol> - </symbol>
	<identifier> x </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> flipSign </identifier>
	<symbol> = </symbol>
	<identifier> flipSign </identifier>
	<symbol> + </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> y </identifier>
	<symbol> &lt; </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> y </identifier>
	<symbol> = </symbol>
	<symbol> - </symbol>
	<identifier> y </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> flipSign </identifier>
	<symbol> = </symbol>
	<identifier> flipSign </identifier>
	<symbol> + </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> let </keyword>
	<identifier> sum </identifier>
	<symbol> = </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> shiftedX </identifier>
	<symbol> = </symbol>
	<identifier> x </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> j </identifier>
	<symbol> = </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<keyword> while </keyword>
	<symbol> ( </symbol>
	<identifier> y </identifier>
	<symbol> &gt; </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<symbol> ( </symbol>
	<identifier> y </identifier>
	<symbol> &amp; </symbol>
	<identifier> j </identifier>
	<symbol> ) </symbol>
	<symbol> = </symbol>
	<identifier> j </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> sum </identifier>
	<symbol> = </symbol>
	<identifier> sum </identifier>
	<symbol> + </symbol>
	<identifier> shiftedX </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> y </identifier>
	<symbol> = </symbol>
	<identifier> y </identifier>
	<symbol> - </symbol>
	<identifier> j </identifier>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> let </keyword>
	<identifier> shiftedX </identifier>
	<symbol> = </symbol>
	<identifier> shiftedX </identifier>
	<symbol> + </symbol>
	<identifier> shiftedX </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> j </identifier>
	<symbol> = </symbol>
	<identifier> j </identifier>
	<symbol> + </symbol>
	<identifier> j </identifier>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> flipSign </identifier>
	<symbol> = </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> sum </identifier>
	<symbol> = </symbol>
	<symbol> - </symbol>
	<identifier> sum </identifier>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> return </keyword>
	<identifier> sum </identifier>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> function </keyword>
	<keyword> int </keyword>
	<identifier> divide </identifier>
	<symbol> ( </symbol>
	<keyword> int </keyword>
	<identifier> x </identifier>
	<symbol> , </symbol>
	<keyword> int </keyword>
	<identifier> y </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> flipSign </identifier>
	<symbol> ; </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> j </identifier>
	<symbol> ; </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> result </identifier>
	<symbol> ; </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> advanceY </identifier>
	<symbol> ; </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> y </identifier>
	<symbol> = </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> return </keyword>
	<keyword> null </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> = </symbol>
	<identifier> y </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> return </keyword>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> let </keyword>
	<identifier> flipSign </identifier>
	<symbol> = </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ; </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> &lt; </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> x </identifier>
	<symbol> = </symbol>
	<symbol> - </symbol>
	<identifier> x </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> flipSign </identifier>
	<symbol> = </symbol>
	<identifier> flipSign </identifier>
	<symbol> + </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> y </identifier>
	<symbol> &lt; </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> y </identifier>
	<symbol> = </symbol>
	<symbol> - </symbol>
	<identifier> y </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> flipSign </identifier>
	<symbol> = </symbol>
	<identifier> flipSign </identifier>
	<symbol> + </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> &lt; </symbol>
	<identifier> y </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> return </keyword>
	<integerConstant> 0 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> let </keyword>
	<identifier> result </identifier>
	<symbol> = </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> j </identifier>
	<symbol> = </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> shiftedY </identifier>
	<symbol> [ </symbol>
	<identifier> j </identifier>
	<symbol> ] </symbol>
	<symbol> = </symbol>
	<identifier> y </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> advanceY </identifier>
	<symbol> = </symbol>
	<identifier> y </identifier>
	<symbol> + </symbol>
	<identifier> y </identifier>
	<symbol> ; </symbol>
	<keyword> while </keyword>
	<symbol> ( </symbol>
	<symbol> ( </symbol>
	<symbol> ~ </symbol>
	<symbol> ( </symbol>
	<identifier> advanceY </identifier>
	<symbol> &gt; </symbol>
	<identifier> x </identifier>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> &amp; </symbol>
	<symbol> ( </symbol>
	<identifier> advanceY </identifier>
	<symbol> &gt; </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> j </identifier>
	<symbol> = </symbol>
	<identifier> j </identifier>
	<symbol> + </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> shiftedY </identifier>
	<symbol> [ </symbol>
	<identifier> j </identifier>
	<symbol> ] </symbol>
	<symbol> = </symbol>
	<identifier> advanceY </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> advanceY </identifier>
	<symbol> = </symbol>
	<identifier> advanceY </identifier>
	<symbol> + </symbol>
	<identifier> advanceY </identifier>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> while </keyword>
	<symbol> ( </symbol>
	<symbol> ~ </symbol>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> &lt; </symbol>
	<identifier> y </identifier>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<symbol> ~ </symbol>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> &lt; </symbol>
	<identifier> shiftedY </identifier>
	<symbol> [ </symbol>
	<identifier> j </identifier>
	<symbol> ] </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> x </identifier>
	<symbol> = </symbol>
	<identifier> x </identifier>
	<symbol> - </symbol>
	<identifier> shiftedY </identifier>
	<symbol> [ </symbol>
	<identifier> j </identifier>
	<symbol> ] </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> result </identifier>
	<symbol> = </symbol>
	<identifier> result </identifier>
	<symbol> + </symbol>
	<identifier> twoToThe </identifier>
	<symbol> [ </symbol>
	<identifier> j </identifier>
	<symbol> ] </symbol>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> let </keyword>
	<identifier> j </identifier>
	<symbol> = </symbol>
	<identifier> j </identifier>
	<symbol> - </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> flipSign </identifier>
	<symbol> = </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> result </identifier>
	<symbol> = </symbol>
	<symbol> - </symbol>
	<identifier> result </identifier>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> return </keyword>
	<identifier> result </identifier>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> function </keyword>
	<keyword> int </keyword>
	<identifier> sqrt </identifier>
	<symbol> ( </symbol>
	<keyword> int </keyword>
	<identifier> x </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> y </identifier>
	<symbol> ; </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> j </identifier>
	<symbol> ; </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> calc0 </identifier>
	<symbol> ; </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> calc1 </identifier>
	<symbol> ; </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> t </identifier>
	<symbol> ; </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> &lt; </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> return </keyword>
	<keyword> null </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> let </keyword>
	<identifier> j </identifier>
	<symbol> = </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> t </identifier>
	<symbol> = </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ; </symbol>
	<keyword> while </keyword>
	<symbol> ( </symbol>
	<symbol> ( </symbol>
	<identifier> t </identifier>
	<symbol> &lt; </symbol>
	<integerConstant> 7 </integerConstant>
	<symbol> ) </symbol>
	<symbol> &amp; </symbol>
	<symbol> ( </symbol>
	<identifier> j </identifier>
	<symbol> = </symbol>
	<identifier> t </identifier>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> &gt; </symbol>
	<identifier> twoToThe </identifier>
	<symbol> [ </symbol>
	<identifier> j </identifier>
	<symbol> + </symbol>
	<identifier> j </identifier>
	<symbol> + </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ] </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> j </identifier>
	<symbol> = </symbol>
	<identifier> j </identifier>
	<symbol> + </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> let </keyword>
	<identifier> t </identifier>
	<symbol> = </symbol>
	<identifier> t </identifier>
	<symbol> + </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> let </keyword>
	<identifier> y </identifier>
	<symbol> = </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ; </symbol>
	<keyword> while </keyword>
	<symbol> ( </symbol>
	<identifier> j </identifier>
	<symbol> &gt; </symbol>
	<symbol> - </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> calc0 </identifier>
	<symbol> = </symbol>
	<identifier> y </identifier>
	<symbol> + </symbol>
	<identifier> twoToThe </identifier>
	<symbol> [ </symbol>
	<identifier> j </identifier>
	<symbol> ] </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> calc1 </identifier>
	<symbol> = </symbol>
	<identifier> Math </identifier>
	<symbol> . </symbol>
	<identifier> multiply </identifier>
	<symbol> ( </symbol>
	<identifier> calc0 </identifier>
	<symbol> , </symbol>
	<identifier> calc0 </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<symbol> ( </symbol>
	<symbol> ~ </symbol>
	<symbol> ( </symbol>
	<identifier> calc1 </identifier>
	<symbol> &gt; </symbol>
	<identifier> x </identifier>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> &amp; </symbol>
	<symbol> ( </symbol>
	<identifier> calc1 </identifier>
	<symbol> &gt; </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> y </identifier>
	<symbol> = </symbol>
	<identifier> calc0 </identifier>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> let </keyword>
	<identifier> j </identifier>
	<symbol> = </symbol>
	<identifier> j </identifier>
	<symbol> - </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> return </keyword>
	<identifier> y </identifier>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> function </keyword>
	<keyword> int </keyword>
	<identifier> max </identifier>
	<symbol> ( </symbol>
	<keyword> int </keyword>
	<identifier> a </identifier>
	<symbol> , </symbol>
	<keyword> int </keyword>
	<identifier> b </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> a </identifier>
	<symbol> &gt; </symbol>
	<identifier> b </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> return </keyword>
	<identifier> a </identifier>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> else </keyword>
	<symbol> { </symbol>
	<keyword> return </keyword>
	<identifier> b </identifier>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<symbol> } </symbol>
	<keyword> function </keyword>
	<keyword> int </keyword>
	<identifier> min </identifier>
	<symbol> ( </symbol>
	<keyword> int </keyword>
	<identifier> a </identifier>
	<symbol> , </symbol>
	<keyword> int </keyword>
	<identifier> b </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> a </identifier>
	<symbol> &lt; </symbol>
	<identifier> b </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> return </keyword>
	<identifier> a </identifier>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> else </keyword>
	<symbol> { </symbol>
	<keyword> return </keyword>
	<identifier> b </identifier>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<symbol> } </symbol>
	<symbol> } </symbol>
</tokens>