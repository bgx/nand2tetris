<tokens>
	<keyword> class </keyword>
	<identifier> BreakawayGame </identifier>
	<symbol> { </symbol>
	<keyword> field </keyword>
	<identifier> PlayArea </identifier>
	<identifier> playarea </identifier>
	<symbol> ; </symbol>
	<keyword> field </keyword>
	<identifier> Ball </identifier>
	<identifier> ball </identifier>
	<symbol> ; </symbol>
	<keyword> field </keyword>
	<identifier> Paddle </identifier>
	<identifier> paddle </identifier>
	<symbol> ; </symbol>
	<keyword> field </keyword>
	<identifier> Wall </identifier>
	<identifier> wall </identifier>
	<symbol> ; </symbol>
	<keyword> field </keyword>
	<keyword> int </keyword>
	<identifier> lives </identifier>
	<symbol> ; </symbol>
	<keyword> field </keyword>
	<keyword> int </keyword>
	<identifier> score </identifier>
	<symbol> ; </symbol>
	<keyword> field </keyword>
	<keyword> char </keyword>
	<identifier> key </identifier>
	<symbol> ; </symbol>
	<keyword> field </keyword>
	<keyword> int </keyword>
	<identifier> state </identifier>
	<symbol> ; </symbol>
	<keyword> constructor </keyword>
	<identifier> BreakawayGame </identifier>
	<identifier> new </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> state </identifier>
	<symbol> = </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<keyword> this </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> dispose </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> playarea </identifier>
	<symbol> . </symbol>
	<identifier> dispose </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> ball </identifier>
	<symbol> . </symbol>
	<identifier> dispose </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> paddle </identifier>
	<symbol> . </symbol>
	<identifier> dispose </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> wall </identifier>
	<symbol> . </symbol>
	<identifier> dispose </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Memory </identifier>
	<symbol> . </symbol>
	<identifier> deAlloc </identifier>
	<symbol> ( </symbol>
	<keyword> this </keyword>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> run </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> while </keyword>
	<symbol> ( </symbol>
	<keyword> true </keyword>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> state </identifier>
	<symbol> = </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> printStartScreen </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> waitSpacePressed </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> initializeGameLoop </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> else </keyword>
	<symbol> { </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> state </identifier>
	<symbol> = </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> Screen </identifier>
	<symbol> . </symbol>
	<identifier> clearScreen </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> initializeComponents </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> while </keyword>
	<symbol> ( </symbol>
	<identifier> state </identifier>
	<symbol> = </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> processInput </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> update </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> render </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> do </keyword>
	<identifier> disposeComponents </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> else </keyword>
	<symbol> { </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> state </identifier>
	<symbol> = </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> printLives </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> printLostLife </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> waitSpacePressed </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> else </keyword>
	<symbol> { </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> state </identifier>
	<symbol> = </symbol>
	<integerConstant> 3 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> printGameOver </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> waitSpacePressed </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> else </keyword>
	<symbol> { </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> state </identifier>
	<symbol> = </symbol>
	<integerConstant> 4 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> printYouWin </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> waitSpacePressed </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<symbol> } </symbol>
	<symbol> } </symbol>
	<symbol> } </symbol>
	<symbol> } </symbol>
	<symbol> } </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> waitSpacePressed </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> while </keyword>
	<symbol> ( </symbol>
	<symbol> ~ </symbol>
	<symbol> ( </symbol>
	<identifier> Keyboard </identifier>
	<symbol> . </symbol>
	<identifier> keyPressed </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> = </symbol>
	<integerConstant> 32 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<symbol> } </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<symbol> ( </symbol>
	<identifier> state </identifier>
	<symbol> = </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ) </symbol>
	<symbol> | </symbol>
	<symbol> ( </symbol>
	<identifier> state </identifier>
	<symbol> = </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> state </identifier>
	<symbol> = </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> else </keyword>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> state </identifier>
	<symbol> = </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> while </keyword>
	<symbol> ( </symbol>
	<symbol> ( </symbol>
	<identifier> Keyboard </identifier>
	<symbol> . </symbol>
	<identifier> keyPressed </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> = </symbol>
	<integerConstant> 32 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<symbol> } </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> initializeGameLoop </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> lives </identifier>
	<symbol> = </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> wall </identifier>
	<symbol> = </symbol>
	<identifier> Wall </identifier>
	<symbol> . </symbol>
	<identifier> new </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> wall </identifier>
	<symbol> . </symbol>
	<identifier> newBrickGroup </identifier>
	<symbol> ( </symbol>
	<integerConstant> 176 </integerConstant>
	<symbol> , </symbol>
	<integerConstant> 50 </integerConstant>
	<symbol> , </symbol>
	<integerConstant> 30 </integerConstant>
	<symbol> , </symbol>
	<integerConstant> 10 </integerConstant>
	<symbol> , </symbol>
	<integerConstant> 32 </integerConstant>
	<symbol> , </symbol>
	<integerConstant> 12 </integerConstant>
	<symbol> , </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> , </symbol>
	<integerConstant> 6 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> initializeComponents </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> playarea </identifier>
	<symbol> = </symbol>
	<identifier> PlayArea </identifier>
	<symbol> . </symbol>
	<identifier> new </identifier>
	<symbol> ( </symbol>
	<integerConstant> 216 </integerConstant>
	<symbol> , </symbol>
	<integerConstant> 252 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> ball </identifier>
	<symbol> = </symbol>
	<identifier> Ball </identifier>
	<symbol> . </symbol>
	<identifier> new </identifier>
	<symbol> ( </symbol>
	<integerConstant> 250 </integerConstant>
	<symbol> , </symbol>
	<integerConstant> 100 </integerConstant>
	<symbol> , </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> , </symbol>
	<integerConstant> 3 </integerConstant>
	<symbol> , </symbol>
	<integerConstant> 6 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> paddle </identifier>
	<symbol> = </symbol>
	<identifier> Paddle </identifier>
	<symbol> . </symbol>
	<identifier> new </identifier>
	<symbol> ( </symbol>
	<integerConstant> 255 </integerConstant>
	<symbol> , </symbol>
	<integerConstant> 220 </integerConstant>
	<symbol> , </symbol>
	<integerConstant> 25 </integerConstant>
	<symbol> , </symbol>
	<integerConstant> 7 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> printLives </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> disposeComponents </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> playarea </identifier>
	<symbol> . </symbol>
	<identifier> dispose </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> ball </identifier>
	<symbol> . </symbol>
	<identifier> dispose </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> paddle </identifier>
	<symbol> . </symbol>
	<identifier> dispose </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> printMessage </identifier>
	<symbol> ( </symbol>
	<identifier> String </identifier>
	<identifier> s </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> Output </identifier>
	<symbol> . </symbol>
	<identifier> moveCursor </identifier>
	<symbol> ( </symbol>
	<integerConstant> 8 </integerConstant>
	<symbol> , </symbol>
	<integerConstant> 27 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Output </identifier>
	<symbol> . </symbol>
	<identifier> printString </identifier>
	<symbol> ( </symbol>
	<identifier> s </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> s </identifier>
	<symbol> = </symbol>
	<stringConstant> Press Spacebar to Play </stringConstant>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Output </identifier>
	<symbol> . </symbol>
	<identifier> moveCursor </identifier>
	<symbol> ( </symbol>
	<integerConstant> 14 </integerConstant>
	<symbol> , </symbol>
	<integerConstant> 21 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Output </identifier>
	<symbol> . </symbol>
	<identifier> printString </identifier>
	<symbol> ( </symbol>
	<identifier> s </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> printStartScreen </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> var </keyword>
	<identifier> String </identifier>
	<identifier> s </identifier>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Screen </identifier>
	<symbol> . </symbol>
	<identifier> clearScreen </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> s </identifier>
	<symbol> = </symbol>
	<stringConstant>  Breakaway </stringConstant>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> printMessage </identifier>
	<symbol> ( </symbol>
	<identifier> s </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> printYouWin </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> var </keyword>
	<identifier> String </identifier>
	<identifier> s </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> s </identifier>
	<symbol> = </symbol>
	<stringConstant>  You Win!! </stringConstant>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> printMessage </identifier>
	<symbol> ( </symbol>
	<identifier> s </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> printLostLife </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> var </keyword>
	<identifier> String </identifier>
	<identifier> s </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> s </identifier>
	<symbol> = </symbol>
	<stringConstant> Lost a life </stringConstant>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> printMessage </identifier>
	<symbol> ( </symbol>
	<identifier> s </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> printGameOver </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> var </keyword>
	<identifier> String </identifier>
	<identifier> s </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> s </identifier>
	<symbol> = </symbol>
	<stringConstant>  Game Over </stringConstant>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> printMessage </identifier>
	<symbol> ( </symbol>
	<identifier> s </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> printLives </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> var </keyword>
	<identifier> String </identifier>
	<identifier> s </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> s </identifier>
	<symbol> = </symbol>
	<stringConstant> Lives:  </stringConstant>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Output </identifier>
	<symbol> . </symbol>
	<identifier> moveCursor </identifier>
	<symbol> ( </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> , </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Output </identifier>
	<symbol> . </symbol>
	<identifier> printString </identifier>
	<symbol> ( </symbol>
	<identifier> s </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Output </identifier>
	<symbol> . </symbol>
	<identifier> printInt </identifier>
	<symbol> ( </symbol>
	<identifier> lives </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> processInput </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> key </identifier>
	<symbol> = </symbol>
	<identifier> Keyboard </identifier>
	<symbol> . </symbol>
	<identifier> keyPressed </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> update </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> var </keyword>
	<identifier> Hitbox </identifier>
	<identifier> ballh </identifier>
	<symbol> , </symbol>
	<identifier> playareah </identifier>
	<symbol> , </symbol>
	<identifier> paddleh </identifier>
	<symbol> , </symbol>
	<identifier> brickh </identifier>
	<symbol> ; </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> count </identifier>
	<symbol> , </symbol>
	<identifier> i </identifier>
	<symbol> ; </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> a </identifier>
	<symbol> , </symbol>
	<identifier> b </identifier>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> wall </identifier>
	<symbol> . </symbol>
	<identifier> moveRight </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> playareah </identifier>
	<symbol> = </symbol>
	<identifier> playarea </identifier>
	<symbol> . </symbol>
	<identifier> getHitbox </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> key </identifier>
	<symbol> = </symbol>
	<integerConstant> 81 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> state </identifier>
	<symbol> = </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> key </identifier>
	<symbol> = </symbol>
	<integerConstant> 130 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> paddle </identifier>
	<symbol> . </symbol>
	<identifier> moveLeftSim </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> paddleh </identifier>
	<symbol> = </symbol>
	<identifier> paddle </identifier>
	<symbol> . </symbol>
	<identifier> getHitbox </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<symbol> ~ </symbol>
	<symbol> ( </symbol>
	<identifier> paddleh </identifier>
	<symbol> . </symbol>
	<identifier> getXmin </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> &lt; </symbol>
	<identifier> playareah </identifier>
	<symbol> . </symbol>
	<identifier> getXmin </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> paddle </identifier>
	<symbol> . </symbol>
	<identifier> moveLeft </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<symbol> } </symbol>
	<keyword> else </keyword>
	<symbol> { </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> key </identifier>
	<symbol> = </symbol>
	<integerConstant> 132 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> paddle </identifier>
	<symbol> . </symbol>
	<identifier> moveRightSim </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> paddleh </identifier>
	<symbol> = </symbol>
	<identifier> paddle </identifier>
	<symbol> . </symbol>
	<identifier> getHitbox </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<symbol> ~ </symbol>
	<symbol> ( </symbol>
	<identifier> paddleh </identifier>
	<symbol> . </symbol>
	<identifier> getXmax </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> &gt; </symbol>
	<identifier> playareah </identifier>
	<symbol> . </symbol>
	<identifier> getXmax </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> paddle </identifier>
	<symbol> . </symbol>
	<identifier> moveRight </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<symbol> } </symbol>
	<symbol> } </symbol>
	<keyword> do </keyword>
	<identifier> ball </identifier>
	<symbol> . </symbol>
	<identifier> moveBallSim </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> ballh </identifier>
	<symbol> = </symbol>
	<identifier> ball </identifier>
	<symbol> . </symbol>
	<identifier> getHitbox </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> paddleh </identifier>
	<symbol> = </symbol>
	<identifier> paddle </identifier>
	<symbol> . </symbol>
	<identifier> getHitbox </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<symbol> ( </symbol>
	<identifier> ballh </identifier>
	<symbol> . </symbol>
	<identifier> getXmin </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> &lt; </symbol>
	<identifier> playareah </identifier>
	<symbol> . </symbol>
	<identifier> getXmin </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> | </symbol>
	<symbol> ( </symbol>
	<identifier> ballh </identifier>
	<symbol> . </symbol>
	<identifier> getXmax </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> &gt; </symbol>
	<identifier> playareah </identifier>
	<symbol> . </symbol>
	<identifier> getXmax </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> ball </identifier>
	<symbol> . </symbol>
	<identifier> flipDeltaX </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> ballh </identifier>
	<symbol> . </symbol>
	<identifier> getYmin </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> &lt; </symbol>
	<identifier> playareah </identifier>
	<symbol> . </symbol>
	<identifier> getYmin </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> ball </identifier>
	<symbol> . </symbol>
	<identifier> flipDeltaY </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> ballh </identifier>
	<symbol> . </symbol>
	<identifier> getYmax </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> &gt; </symbol>
	<identifier> playareah </identifier>
	<symbol> . </symbol>
	<identifier> getYmax </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> ball </identifier>
	<symbol> . </symbol>
	<identifier> flipDeltaY </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> lives </identifier>
	<symbol> = </symbol>
	<identifier> lives </identifier>
	<symbol> - </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> lives </identifier>
	<symbol> &lt; </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> state </identifier>
	<symbol> = </symbol>
	<integerConstant> 3 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> else </keyword>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> state </identifier>
	<symbol> = </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<symbol> } </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<symbol> ( </symbol>
	<identifier> ballh </identifier>
	<symbol> . </symbol>
	<identifier> getYmax </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> &gt; </symbol>
	<identifier> paddleh </identifier>
	<symbol> . </symbol>
	<identifier> getYmin </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> &amp; </symbol>
	<symbol> ( </symbol>
	<identifier> ballh </identifier>
	<symbol> . </symbol>
	<identifier> getYmin </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> &lt; </symbol>
	<identifier> paddleh </identifier>
	<symbol> . </symbol>
	<identifier> getYmax </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> &amp; </symbol>
	<symbol> ( </symbol>
	<identifier> ballh </identifier>
	<symbol> . </symbol>
	<identifier> getXmax </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> &gt; </symbol>
	<identifier> paddleh </identifier>
	<symbol> . </symbol>
	<identifier> getXmin </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> &amp; </symbol>
	<symbol> ( </symbol>
	<identifier> ballh </identifier>
	<symbol> . </symbol>
	<identifier> getXmin </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> &lt; </symbol>
	<identifier> paddleh </identifier>
	<symbol> . </symbol>
	<identifier> getXmax </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> a </identifier>
	<symbol> = </symbol>
	<symbol> ( </symbol>
	<identifier> paddleh </identifier>
	<symbol> . </symbol>
	<identifier> getXmax </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> + </symbol>
	<identifier> paddleh </identifier>
	<symbol> . </symbol>
	<identifier> getXmin </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> b </identifier>
	<symbol> = </symbol>
	<symbol> ( </symbol>
	<identifier> ballh </identifier>
	<symbol> . </symbol>
	<identifier> getXmax </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> + </symbol>
	<identifier> ballh </identifier>
	<symbol> . </symbol>
	<identifier> getXmin </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> / </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> ball </identifier>
	<symbol> . </symbol>
	<identifier> setDelta </identifier>
	<symbol> ( </symbol>
	<identifier> b </identifier>
	<symbol> - </symbol>
	<identifier> a </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> let </keyword>
	<identifier> count </identifier>
	<symbol> = </symbol>
	<identifier> wall </identifier>
	<symbol> . </symbol>
	<identifier> getCount </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> i </identifier>
	<symbol> = </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ; </symbol>
	<keyword> while </keyword>
	<symbol> ( </symbol>
	<identifier> i </identifier>
	<symbol> &lt; </symbol>
	<identifier> count </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> brickh </identifier>
	<symbol> = </symbol>
	<identifier> wall </identifier>
	<symbol> . </symbol>
	<identifier> getHitbox </identifier>
	<symbol> ( </symbol>
	<identifier> i </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<symbol> ( </symbol>
	<symbol> ( </symbol>
	<identifier> ballh </identifier>
	<symbol> . </symbol>
	<identifier> getXmax </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> &gt; </symbol>
	<identifier> brickh </identifier>
	<symbol> . </symbol>
	<identifier> getXmin </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> &amp; </symbol>
	<symbol> ( </symbol>
	<identifier> ballh </identifier>
	<symbol> . </symbol>
	<identifier> getXmin </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> &lt; </symbol>
	<identifier> brickh </identifier>
	<symbol> . </symbol>
	<identifier> getXmax </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> &amp; </symbol>
	<symbol> ( </symbol>
	<symbol> ( </symbol>
	<symbol> ( </symbol>
	<identifier> ballh </identifier>
	<symbol> . </symbol>
	<identifier> getYmax </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> &gt; </symbol>
	<identifier> brickh </identifier>
	<symbol> . </symbol>
	<identifier> getYmin </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> &amp; </symbol>
	<symbol> ( </symbol>
	<identifier> ballh </identifier>
	<symbol> . </symbol>
	<identifier> getYmax </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> &lt; </symbol>
	<identifier> brickh </identifier>
	<symbol> . </symbol>
	<identifier> getYmax </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> | </symbol>
	<symbol> ( </symbol>
	<symbol> ( </symbol>
	<identifier> ballh </identifier>
	<symbol> . </symbol>
	<identifier> getYmin </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> &lt; </symbol>
	<identifier> brickh </identifier>
	<symbol> . </symbol>
	<identifier> getYmax </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> &amp; </symbol>
	<symbol> ( </symbol>
	<identifier> ballh </identifier>
	<symbol> . </symbol>
	<identifier> getYmin </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> &gt; </symbol>
	<identifier> brickh </identifier>
	<symbol> . </symbol>
	<identifier> getYmin </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> ball </identifier>
	<symbol> . </symbol>
	<identifier> flipDeltaY </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> wall </identifier>
	<symbol> . </symbol>
	<identifier> destroyBrick </identifier>
	<symbol> ( </symbol>
	<identifier> i </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> let </keyword>
	<identifier> i </identifier>
	<symbol> = </symbol>
	<identifier> i </identifier>
	<symbol> + </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> wall </identifier>
	<symbol> . </symbol>
	<identifier> isDestroyed </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> state </identifier>
	<symbol> = </symbol>
	<integerConstant> 4 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> do </keyword>
	<identifier> ball </identifier>
	<symbol> . </symbol>
	<identifier> moveBall </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> ballh </identifier>
	<symbol> . </symbol>
	<identifier> dispose </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> playareah </identifier>
	<symbol> . </symbol>
	<identifier> dispose </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> paddleh </identifier>
	<symbol> . </symbol>
	<identifier> dispose </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> render </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> playarea </identifier>
	<symbol> . </symbol>
	<identifier> clear </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> paddle </identifier>
	<symbol> . </symbol>
	<identifier> draw </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> ball </identifier>
	<symbol> . </symbol>
	<identifier> draw </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> wall </identifier>
	<symbol> . </symbol>
	<identifier> draw </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<symbol> } </symbol>
</tokens>