<class>
	<keyword> class </keyword>
	<identifier> Sys </identifier>
	class : defined
	<symbol> { </symbol>
	<subroutineDec>
		<keyword> function </keyword>
		<keyword> void </keyword>
		<identifier> init </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Memory </identifier>
					class : used
					<symbol> . </symbol>
					<identifier> init </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Math </identifier>
					class : used
					<symbol> . </symbol>
					<identifier> init </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Output </identifier>
					class : used
					<symbol> . </symbol>
					<identifier> init </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Screen </identifier>
					class : used
					<symbol> . </symbol>
					<identifier> init </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Keyboard </identifier>
					class : used
					<symbol> . </symbol>
					<identifier> init </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Main </identifier>
					class : used
					<symbol> . </symbol>
					<identifier> main </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Sys </identifier>
					class : used
					<symbol> . </symbol>
					<identifier> halt </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> function </keyword>
		<keyword> void </keyword>
		<identifier> halt </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<keyword> true </keyword>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> function </keyword>
		<keyword> void </keyword>
		<identifier> wait </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
			<keyword> int </keyword>
			<identifier> duration </identifier>
			argument : defined : argument 0
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> i </identifier>
				var : defined : var 0
				<symbol> , </symbol>
				<identifier> j </identifier>
				var : defined : var 1
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> i </identifier>
					var : used : var 0
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> j </identifier>
					var : used : var 1
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier> i </identifier>
							var : used : var 0
						</term>
						<symbol> &lt; </symbol>
						<term>
							<identifier> duration </identifier>
							argument : used : argument 0
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<whileStatement>
							<keyword> while </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> j </identifier>
									var : used : var 1
								</term>
								<symbol> &lt; </symbol>
								<term>
									<integerConstant> 80 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> j </identifier>
									var : used : var 1
									<symbol> = </symbol>
									<expression>
										<term>
											<identifier> j </identifier>
											var : used : var 1
										</term>
										<symbol> + </symbol>
										<term>
											<integerConstant> 1 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
						</whileStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> j </identifier>
							var : used : var 1
							<symbol> = </symbol>
							<expression>
								<term>
									<integerConstant> 0 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> i </identifier>
							var : used : var 0
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> i </identifier>
									var : used : var 0
								</term>
								<symbol> + </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> function </keyword>
		<keyword> void </keyword>
		<identifier> error </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
			<keyword> int </keyword>
			<identifier> errorCode </identifier>
			argument : defined : argument 0
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Output </identifier>
					class : used
					<symbol> . </symbol>
					<identifier> printString </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<stringConstant> ERR </stringConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Output </identifier>
					class : used
					<symbol> . </symbol>
					<identifier> printInt </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> errorCode </identifier>
								argument : used : argument 0
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<symbol> } </symbol>
</class>
