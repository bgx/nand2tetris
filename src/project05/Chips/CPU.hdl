// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

// bg 2014.7.30

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	
	// instruction <-> i xx a cccccc ddd jjj
	
	// need inverted instruction [15] later
	Not(in=instruction[15], out=notinsti);
	
	ALU(x=dout, y=w2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluout, out=outM, zr=zr, ng=ng);
	
	// need inverted zr and inverted ng later
	Not(in=zr, out=notzr);
	Not(in=ng, out=notng);
	
	Or(a=notinsti, b=instruction[5], out=loada);			// load A if: A-instruction, or A d-bit is set
	ARegister(in=w1, load=loada, out=aout, out[0..14]=addressM);
	
	And(a=instruction[15], b=instruction[4], out=loadd);	// load D if: C-instruction, and D d-bit is set
	DRegister(in=aluout, load=loadd, out=dout);
	
	Mux16(a=aluout, b=instruction, sel=notinsti, out=w1);
	
	Mux16(a=aout, b=inM, sel=instruction[12], out=w2);
	
	// control logic for writeM
	And(a=instruction[15], b=instruction[3], out=writeM);	// write M if: C-instruction, and M d-bit is set
	
	// Next Instruction Fetching logic, using j-bits, zr, and ng
	And(a=instruction[2], b=notzr, out=niw1);
	And(a=niw1, b=ng, out=ni1);
	And(a=instruction[1], b=zr, out=ni2);
	And(a=instruction[0], b=notzr, out=niw2);
	And(a=niw2, b=notng, out=ni3);
	Or(a=ni1, b=ni2, out=niw3);
	Or(a=niw3, b=ni3, out=niloadpc);
	And(a=instruction[15], b=niloadpc, out=loadpc);			// don't set loadpc if A-instruction
	PC(in=aout, inc=true, load=loadpc, reset=reset, out[0..14]=pc);
}