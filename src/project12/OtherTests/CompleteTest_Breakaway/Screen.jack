// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 
 * (Notation convention)
 *   x 0 ---> 511
 * y
 * 0
 * |
 * |
 * V
 * 255
 
 * pixel at (x,y) is mapped to the x%16 bit of memory location 16384+y*32+x/16
 * the 512x256 screen spans memory locations [16384, 24575]

 */
class Screen {

    // Stores the color to be used in draw commands.
    // white = false = 0, black = true = -1
    static boolean color;
    
    static Array twoToThe;
    
    /** Initializes the Screen. */
    function void init() {
        var int i, n;
        
        // Initialize twoToThe[]
        let i = 0;
        let n = 1;
        let twoToThe = Array.new(16);
        while(i < 16) {
            let twoToThe[i] = n;
            let n = n + n;
            let i = i + 1;
        }
        
        let color = true;
        
        return;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
        var int address;
        let address = 16384;
        while(address < 24576){
            do Memory.poke(address,0);
            let address = address + 1;
        }
        return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
        var int address, value;
        
        let address = 16384 + (y*32) + (x/16);
        let value = Memory.peek(address);
        if (color) {
            // set bit
            let value = value | twoToThe[x & 15];
        }
        else {
            // clear bit
            let value = value & ~twoToThe[x & 15];
        }
        do Memory.poke(address, value);
        
        return;
    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int temp, dx, dy;
        var int address1, address2, x1mod, x2mod;
        var int mask, value;
        var int a, b, eval;
        
        if (x1 > x2) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
            
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;
            
        // Horizontal line
        if (dy = 0) {
            
            let address1 = 16384 + (y1*32) + (x1/16);
            let address2 = 16384 + (y1*32) + (x2/16);
            let x1mod = x1&15;
            let x2mod = x2&15;
            
            // Single address
            if (address1 = address2){
                if (x1mod = 0){
                    if(x2mod = 15){
                        do Memory.poke(address1, color);
                        return;
                    }
                    else{
                        let mask = twoToThe[x2mod+1]-1;
                    }
                }
                else{
                    if(x2mod = 15){
                        let mask = -twoToThe[x1mod];
                    }
                    else{
                        let mask = (twoToThe[x2mod+1]-1) & (-twoToThe[x1mod]);
                    }
                }
                
                let value = Memory.peek(address1);
                if (color) {
                    let value = value | mask;
                }
                else {
                    let value = value & ~mask;
                }
                do Memory.poke(address1, value);
            }
            // Multiple addresses
            else {
                
                // fill in address1
                if(x1mod = 0){
                    do Memory.poke(address1, color);
                }
                else{
                    let mask = -twoToThe[x1mod];
                    let value = Memory.peek(address1);
                    if (color) {
                        let value = value | mask;
                    }
                    else {
                        let value = value & ~mask;
                    }
                    do Memory.poke(address1, value);
                }

                // fill in solid addresses in between address1 and address2
                let address1 = address1 + 1;
                while(address1 < address2){
                    do Memory.poke(address1, color);
                    let address1 = address1 + 1;
                }
                                
                // fill in address2
                if(x2mod = 15){
                    do Memory.poke(address2, color);
                }
                else{
                    let mask = twoToThe[x2mod+1]-1;
                    let value = Memory.peek(address2);
                    if (color) {
                        let value = value | mask;
                    }
                    else {
                        let value = value & ~mask;
                    }
                    do Memory.poke(address2, value);
                }                
            }
            return;
        }
        
        // Vertical line
        if (dx = 0){
            if (dy < 0){
                let temp = y1;
                let y1 = y2;
                let y2 = temp;
            }
            while (y1 < y2){
                do Screen.drawPixel(x1,y1);
                let y1 = y1 + 1;
            }
            return;
        }
        
        // Diagonal lines                
        let a = 0;
        let b = 0;
        let eval = 0;
        if ( dy > 0 ){
            while ( ~( (a > dx) | (b > dy) ) ){
                do Screen.drawPixel(x1+a, y1+b);
                // eval = a*dy-b*dx
                if (eval < 0){
                    let a = a + 1;
                    let eval = eval + dy;
                }
                else{
                    let b = b + 1;
                    let eval = eval - dx;
                }
            }
        }
        else{
            while ( ~( (a > dx) | (b < dy) ) ){
                do Screen.drawPixel(x1+a, y1+b);
                // eval = b*dx-a*dy
                if (eval < 0){
                    let a = a + 1;
                    let eval = eval - dy;
                }
                else{
                    let b = b - 1;
                    let eval = eval - dx;
                }
            }            
        }
        
        return;
    }

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {        
        if(y1>y2){
            return;
        }
        if(x1>x2){
            return;
        }
        
        while ( ~(y1 > y2) ){
            do Screen.drawLine(x1,y1,x2,y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
        var int r2, dx, dy, dx2, dy2, dx2diff, dy2diff;
        
        if (r > 181){
            return;
        }
        
        let r2 = r*r;
        
        let dx = r;
        let dx2 = r2;
        let dx2diff = r+r-1;
        let dy = 0;
        let dy2 = 0;
        let dy2diff = 1;
        
        // approximates adjusting r^2 to (r+0.5)^2
        if (r < 181){
            let r2 = r2 + r;
        }
        else {
            let r2 = 32767;
        }
        
        // Center horizontal line
        do Screen.drawLine(cx-dx, cy, cx+dx, cy);
        
        // While dy<=r : bring dx within circle, draw two horizontal lines, increment dy
        while ( ~(dy > r) ){
            while ((r2 - dx2 - dy2) < 0){
                let dx = dx - 1;
                let dx2 = dx2 - dx2diff;
                let dx2diff = dx2diff - 2;
            }
            
            do Screen.drawLine(cx-dx, cy-dy, cx+dx, cy-dy);
            do Screen.drawLine(cx-dx, cy+dy, cx+dx, cy+dy);        
        
            let dy = dy + 1;
            let dy2 = dy2 + dy2diff;
            let dy2diff = dy2diff + 2;
        }
        return;
    }
}
