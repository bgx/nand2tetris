function Screen.init 2
push constant 0
pop local 0
push constant 1
pop local 1
push constant 16
call Array.new 1
pop static 1
label WHILE_EXP0
push local 0
push constant 16
lt
not
if-goto WHILE_END0
push local 0
push static 1
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push local 1
add
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
not
pop static 0
push constant 0
return
function Screen.clearScreen 1
push constant 16384
pop local 0
label WHILE_EXP0
push local 0
push constant 24576
lt
not
if-goto WHILE_END0
push local 0
push constant 0
call Memory.poke 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 0
push constant 0
return
function Screen.drawPixel 2
push constant 16384
push argument 1
push constant 32
call Math.multiply 2
add
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
push local 0
call Memory.peek 1
pop local 1
push static 0
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
push argument 0
push constant 15
and
push static 1
add
pop pointer 1
push that 0
or
pop local 1
goto IF_END0
label IF_FALSE0
push local 1
push argument 0
push constant 15
and
push static 1
add
pop pointer 1
push that 0
not
and
pop local 1
label IF_END0
push local 0
push local 1
call Memory.poke 2
pop temp 0
push constant 0
return
function Screen.drawLine 12
push argument 0
push argument 2
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
pop local 0
push argument 2
pop argument 0
push local 0
pop argument 2
push argument 1
pop local 0
push argument 3
pop argument 1
push local 0
pop argument 3
label IF_FALSE0
push argument 2
push argument 0
sub
pop local 1
push argument 3
push argument 1
sub
pop local 2
push local 2
push constant 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 16384
push argument 1
push constant 32
call Math.multiply 2
add
push argument 0
push constant 16
call Math.divide 2
add
pop local 3
push constant 16384
push argument 1
push constant 32
call Math.multiply 2
add
push argument 2
push constant 16
call Math.divide 2
add
pop local 4
push argument 0
push constant 15
and
pop local 5
push argument 2
push constant 15
and
pop local 6
push local 3
push local 4
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 5
push constant 0
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 6
push constant 15
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 3
push static 0
call Memory.poke 2
pop temp 0
push constant 0
return
goto IF_END4
label IF_FALSE4
push local 6
push constant 1
add
push static 1
add
pop pointer 1
push that 0
push constant 1
sub
pop local 7
label IF_END4
goto IF_END3
label IF_FALSE3
push local 6
push constant 15
eq
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push local 5
push static 1
add
pop pointer 1
push that 0
neg
pop local 7
goto IF_END5
label IF_FALSE5
push local 6
push constant 1
add
push static 1
add
pop pointer 1
push that 0
push constant 1
sub
push local 5
push static 1
add
pop pointer 1
push that 0
neg
and
pop local 7
label IF_END5
label IF_END3
push local 3
call Memory.peek 1
pop local 8
push static 0
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push local 8
push local 7
or
pop local 8
goto IF_END6
label IF_FALSE6
push local 8
push local 7
not
and
pop local 8
label IF_END6
push local 3
push local 8
call Memory.poke 2
pop temp 0
goto IF_END2
label IF_FALSE2
push local 5
push constant 0
eq
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push local 3
push static 0
call Memory.poke 2
pop temp 0
goto IF_END7
label IF_FALSE7
push local 5
push static 1
add
pop pointer 1
push that 0
neg
pop local 7
push local 3
call Memory.peek 1
pop local 8
push static 0
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push local 8
push local 7
or
pop local 8
goto IF_END8
label IF_FALSE8
push local 8
push local 7
not
and
pop local 8
label IF_END8
push local 3
push local 8
call Memory.poke 2
pop temp 0
label IF_END7
push local 3
push constant 1
add
pop local 3
label WHILE_EXP0
push local 3
push local 4
lt
not
if-goto WHILE_END0
push local 3
push static 0
call Memory.poke 2
pop temp 0
push local 3
push constant 1
add
pop local 3
goto WHILE_EXP0
label WHILE_END0
push local 6
push constant 15
eq
if-goto IF_TRUE9
goto IF_FALSE9
label IF_TRUE9
push local 4
push static 0
call Memory.poke 2
pop temp 0
goto IF_END9
label IF_FALSE9
push local 6
push constant 1
add
push static 1
add
pop pointer 1
push that 0
push constant 1
sub
pop local 7
push local 4
call Memory.peek 1
pop local 8
push static 0
if-goto IF_TRUE10
goto IF_FALSE10
label IF_TRUE10
push local 8
push local 7
or
pop local 8
goto IF_END10
label IF_FALSE10
push local 8
push local 7
not
and
pop local 8
label IF_END10
push local 4
push local 8
call Memory.poke 2
pop temp 0
label IF_END9
label IF_END2
push constant 0
return
label IF_FALSE1
push local 1
push constant 0
eq
if-goto IF_TRUE11
goto IF_FALSE11
label IF_TRUE11
push local 2
push constant 0
lt
if-goto IF_TRUE12
goto IF_FALSE12
label IF_TRUE12
push argument 1
pop local 0
push argument 3
pop argument 1
push local 0
pop argument 3
label IF_FALSE12
label WHILE_EXP1
push argument 1
push argument 3
lt
not
if-goto WHILE_END1
push argument 0
push argument 1
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 1
add
pop argument 1
goto WHILE_EXP1
label WHILE_END1
push constant 0
return
label IF_FALSE11
push constant 0
pop local 9
push constant 0
pop local 10
push constant 0
pop local 11
push local 2
push constant 0
gt
if-goto IF_TRUE13
goto IF_FALSE13
label IF_TRUE13
label WHILE_EXP2
push local 9
push local 1
gt
push local 10
push local 2
gt
or
not
not
if-goto WHILE_END2
push argument 0
push local 9
add
push argument 1
push local 10
add
call Screen.drawPixel 2
pop temp 0
push local 11
push constant 0
lt
if-goto IF_TRUE14
goto IF_FALSE14
label IF_TRUE14
push local 9
push constant 1
add
pop local 9
push local 11
push local 2
add
pop local 11
goto IF_END14
label IF_FALSE14
push local 10
push constant 1
add
pop local 10
push local 11
push local 1
sub
pop local 11
label IF_END14
goto WHILE_EXP2
label WHILE_END2
goto IF_END13
label IF_FALSE13
label WHILE_EXP3
push local 9
push local 1
gt
push local 10
push local 2
lt
or
not
not
if-goto WHILE_END3
push argument 0
push local 9
add
push argument 1
push local 10
add
call Screen.drawPixel 2
pop temp 0
push local 11
push constant 0
lt
if-goto IF_TRUE15
goto IF_FALSE15
label IF_TRUE15
push local 9
push constant 1
add
pop local 9
push local 11
push local 2
sub
pop local 11
goto IF_END15
label IF_FALSE15
push local 10
push constant 1
sub
pop local 10
push local 11
push local 1
sub
pop local 11
label IF_END15
goto WHILE_EXP3
label WHILE_END3
label IF_END13
push constant 0
return
function Screen.drawRectangle 0
push argument 1
push argument 3
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push argument 0
push argument 2
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
return
label IF_FALSE1
label WHILE_EXP0
push argument 1
push argument 3
gt
not
not
if-goto WHILE_END0
push argument 0
push argument 1
push argument 2
push argument 1
call Screen.drawLine 4
pop temp 0
push argument 1
push constant 1
add
pop argument 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawCircle 7
push argument 2
push constant 181
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push argument 2
push argument 2
call Math.multiply 2
pop local 0
push argument 2
pop local 1
push local 0
pop local 3
push argument 2
push argument 2
add
push constant 1
sub
pop local 5
push constant 0
pop local 2
push constant 0
pop local 4
push constant 1
pop local 6
push argument 2
push constant 181
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
push argument 2
add
pop local 0
goto IF_END1
label IF_FALSE1
push constant 32767
pop local 0
label IF_END1
push argument 0
push local 1
sub
push argument 1
push argument 0
push local 1
add
push argument 1
call Screen.drawLine 4
pop temp 0
label WHILE_EXP0
push local 2
push argument 2
gt
not
not
if-goto WHILE_END0
label WHILE_EXP1
push local 0
push local 3
sub
push local 4
sub
push constant 0
lt
not
if-goto WHILE_END1
push local 1
push constant 1
sub
pop local 1
push local 3
push local 5
sub
pop local 3
push local 5
push constant 2
sub
pop local 5
goto WHILE_EXP1
label WHILE_END1
push argument 0
push local 1
sub
push argument 1
push local 2
sub
push argument 0
push local 1
add
push argument 1
push local 2
sub
call Screen.drawLine 4
pop temp 0
push argument 0
push local 1
sub
push argument 1
push local 2
add
push argument 0
push local 1
add
push argument 1
push local 2
add
call Screen.drawLine 4
pop temp 0
push local 2
push constant 1
add
pop local 2
push local 4
push local 6
add
pop local 4
push local 6
push constant 2
add
pop local 6
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
