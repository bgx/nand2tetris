// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {
    
    // fixed size allocated for _backingArray
    field int _maxLength;
    
    // Array of fixed size _maxLength.  holds string data    
    field Array _backingArray;
    
    // actual length of the variable-length string stored in the _backingArray.
    // must be less than or equal to _maxLength
    field int _length;
    
    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
        let _maxLength = maxLength;
        let _length = 0;
        
        if (_maxLength > 0) {
            let _backingArray = Array.new(_maxLength);
        }
        
        return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this String. */
    method int length() {
        return _length;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
        if( (j < 0) | (j > (_length-1)) ){
            return null;
        }
        return _backingArray[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
        if( (j < 0) | (j > (_length-1)) ){
            return;
        }
        let _backingArray[j] = c;
        return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
        if(_length < _maxLength) {
            let _backingArray[_length] = c;
            let _length = _length + 1;
        }
        
        return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
        let _length = _length - 1;
        return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
        var boolean flipSign;
        var int i;
        var char c;
        var int value;
        
        let value = 0;
        let flipSign = false;
        let i = 0;
        
        let c = charAt(i);
        if( c = 45 ){
            let flipSign = true;
            let i = i + 1;
            let c = charAt(i);
        }    
        
        // Digits 0-9 are ASCII code 48-57
        while( (c > 47) & (c < 58) ){
            let value = (10 * value) + (c - 48);
            let i = i + 1;
            // charAt() will return null if i is out of range
            let c = charAt(i);
        }
        
        if( flipSign) {
            let value = -value;
        }
        
        return value;
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {
        var boolean flipSign;
        var Array digitStack;
        
        // stack pointer for digitStack
        var int i; 
        
        let flipSign = false;
        if (number < 0){
            // for now, we just don't even try with -32768
            if (number = (32767+1)) {
                return;
            }
            let number = -number;
            let flipSign = true;
        }
        
        // fill digitStack with digits to write to string
        let digitStack = Array.new(5);
        let i = 0;
        while( (number > 0) & (i < 5) ){
            // performing modulus, i.e. (number % 10)
            let digitStack[i] = number - ( (number / 10) * 10 );
            let number = number / 10;
            let i = i + 1;
        }    
        
        let _length = 0;
        
        if(flipSign) {
            do appendChar(45);
        }
        
        let i = i - 1;
        while (i > -1) {
            // Digits 0-9 are ASCII code 48-57
            do appendChar(digitStack[i] + 48);
            let i = i - 1;
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
