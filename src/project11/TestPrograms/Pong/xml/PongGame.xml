<class>
	<keyword> class </keyword>
	<identifier> PongGame </identifier>
	class : defined
	<symbol> { </symbol>
	<classVarDec>
		<keyword> static </keyword>
		<identifier> PongGame </identifier>
		class : used
		<identifier> instance </identifier>
		static : defined : static 0
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<identifier> Bat </identifier>
		class : used
		<identifier> bat </identifier>
		field : defined : field 0
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<identifier> Ball </identifier>
		class : used
		<identifier> ball </identifier>
		field : defined : field 1
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier> wall </identifier>
		field : defined : field 2
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> boolean </keyword>
		<identifier> exit </identifier>
		field : defined : field 3
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier> score </identifier>
		field : defined : field 4
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier> lastWall </identifier>
		field : defined : field 5
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier> batWidth </identifier>
		field : defined : field 6
		<symbol> ; </symbol>
	</classVarDec>
	<subroutineDec>
		<keyword> constructor </keyword>
		<identifier> PongGame </identifier>
		class : used
		<identifier> new </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Screen </identifier>
					class : used
					<symbol> . </symbol>
					<identifier> clearScreen </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> batWidth </identifier>
					field : used : field 6
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 50 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> bat </identifier>
					field : used : field 0
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> Bat </identifier>
							class : used
							<symbol> . </symbol>
							<identifier> new </identifier>
							subroutine : used
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<integerConstant> 230 </integerConstant>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 229 </integerConstant>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<identifier> batWidth </identifier>
										field : used : field 6
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 7 </integerConstant>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> ball </identifier>
					field : used : field 1
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> Ball </identifier>
							class : used
							<symbol> . </symbol>
							<identifier> new </identifier>
							subroutine : used
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<integerConstant> 253 </integerConstant>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 222 </integerConstant>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 0 </integerConstant>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 511 </integerConstant>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 0 </integerConstant>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 229 </integerConstant>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> ball </identifier>
					field : used : field 1
					<symbol> . </symbol>
					<identifier> setDestination </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<integerConstant> 400 </integerConstant>
							</term>
						</expression>
						<symbol> , </symbol>
						<expression>
							<term>
								<integerConstant> 0 </integerConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Screen </identifier>
					class : used
					<symbol> . </symbol>
					<identifier> drawRectangle </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<integerConstant> 0 </integerConstant>
							</term>
						</expression>
						<symbol> , </symbol>
						<expression>
							<term>
								<integerConstant> 238 </integerConstant>
							</term>
						</expression>
						<symbol> , </symbol>
						<expression>
							<term>
								<integerConstant> 511 </integerConstant>
							</term>
						</expression>
						<symbol> , </symbol>
						<expression>
							<term>
								<integerConstant> 240 </integerConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Output </identifier>
					class : used
					<symbol> . </symbol>
					<identifier> moveCursor </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<integerConstant> 22 </integerConstant>
							</term>
						</expression>
						<symbol> , </symbol>
						<expression>
							<term>
								<integerConstant> 0 </integerConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Output </identifier>
					class : used
					<symbol> . </symbol>
					<identifier> printString </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<stringConstant> Score: 0 </stringConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> exit </identifier>
					field : used : field 3
					<symbol> = </symbol>
					<expression>
						<term>
							<keyword> false </keyword>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> score </identifier>
					field : used : field 4
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> wall </identifier>
					field : used : field 2
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> lastWall </identifier>
					field : used : field 5
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<returnStatement>
					<keyword> return </keyword>
					<expression>
						<term>
							<keyword> this </keyword>
						</term>
					</expression>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> dispose </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier> bat </identifier>
					field : used : field 0
					<symbol> . </symbol>
					<identifier> dispose </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> ball </identifier>
					field : used : field 1
					<symbol> . </symbol>
					<identifier> dispose </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Memory </identifier>
					class : used
					<symbol> . </symbol>
					<identifier> deAlloc </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<keyword> this </keyword>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> function </keyword>
		<keyword> void </keyword>
		<identifier> newInstance </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> instance </identifier>
					static : used : static 0
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> PongGame </identifier>
							class : used
							<symbol> . </symbol>
							<identifier> new </identifier>
							subroutine : used
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> function </keyword>
		<identifier> PongGame </identifier>
		class : used
		<identifier> getInstance </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<returnStatement>
					<keyword> return </keyword>
					<expression>
						<term>
							<identifier> instance </identifier>
							static : used : static 0
						</term>
					</expression>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> run </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> char </keyword>
				<identifier> key </identifier>
				var : defined : var 0
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ~ </symbol>
							<term>
								<identifier> exit </identifier>
								field : used : field 3
							</term>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<whileStatement>
							<keyword> while </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<identifier> key </identifier>
											var : used : var 0
										</term>
										<symbol> = </symbol>
										<term>
											<integerConstant> 0 </integerConstant>
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
								<symbol> &amp; </symbol>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<symbol> ~ </symbol>
											<term>
												<identifier> exit </identifier>
												field : used : field 3
											</term>
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> key </identifier>
									var : used : var 0
									<symbol> = </symbol>
									<expression>
										<term>
											<identifier> Keyboard </identifier>
											class : used
											<symbol> . </symbol>
											<identifier> keyPressed </identifier>
											subroutine : used
											<symbol> ( </symbol>
											<expressionList>
											</expressionList>
											<symbol> ) </symbol>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier> bat </identifier>
									field : used : field 0
									<symbol> . </symbol>
									<identifier> move </identifier>
									subroutine : used
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier> moveBall </identifier>
									subroutine : used
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
							</statements>
							<symbol> } </symbol>
						</whileStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> key </identifier>
									var : used : var 0
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 130 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<doStatement>
									<keyword> do </keyword>
									<identifier> bat </identifier>
									field : used : field 0
									<symbol> . </symbol>
									<identifier> setDirection </identifier>
									subroutine : used
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<integerConstant> 1 </integerConstant>
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
							</statements>
							<symbol> } </symbol>
							<keyword> else </keyword>
							<symbol> { </symbol>
							<statements>
								<ifStatement>
									<keyword> if </keyword>
									<symbol> ( </symbol>
									<expression>
										<term>
											<identifier> key </identifier>
											var : used : var 0
										</term>
										<symbol> = </symbol>
										<term>
											<integerConstant> 132 </integerConstant>
										</term>
									</expression>
									<symbol> ) </symbol>
									<symbol> { </symbol>
									<statements>
										<doStatement>
											<keyword> do </keyword>
											<identifier> bat </identifier>
											field : used : field 0
											<symbol> . </symbol>
											<identifier> setDirection </identifier>
											subroutine : used
											<symbol> ( </symbol>
											<expressionList>
												<expression>
													<term>
														<integerConstant> 2 </integerConstant>
													</term>
												</expression>
											</expressionList>
											<symbol> ) </symbol>
											<symbol> ; </symbol>
										</doStatement>
									</statements>
									<symbol> } </symbol>
									<keyword> else </keyword>
									<symbol> { </symbol>
									<statements>
										<ifStatement>
											<keyword> if </keyword>
											<symbol> ( </symbol>
											<expression>
												<term>
													<identifier> key </identifier>
													var : used : var 0
												</term>
												<symbol> = </symbol>
												<term>
													<integerConstant> 140 </integerConstant>
												</term>
											</expression>
											<symbol> ) </symbol>
											<symbol> { </symbol>
											<statements>
												<letStatement>
													<keyword> let </keyword>
													<identifier> exit </identifier>
													field : used : field 3
													<symbol> = </symbol>
													<expression>
														<term>
															<keyword> true </keyword>
														</term>
													</expression>
													<symbol> ; </symbol>
												</letStatement>
											</statements>
											<symbol> } </symbol>
										</ifStatement>
									</statements>
									<symbol> } </symbol>
								</ifStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<whileStatement>
							<keyword> while </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<symbol> ~ </symbol>
											<term>
												<symbol> ( </symbol>
												<expression>
													<term>
														<identifier> key </identifier>
														var : used : var 0
													</term>
													<symbol> = </symbol>
													<term>
														<integerConstant> 0 </integerConstant>
													</term>
												</expression>
												<symbol> ) </symbol>
											</term>
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
								<symbol> &amp; </symbol>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<symbol> ~ </symbol>
											<term>
												<identifier> exit </identifier>
												field : used : field 3
											</term>
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> key </identifier>
									var : used : var 0
									<symbol> = </symbol>
									<expression>
										<term>
											<identifier> Keyboard </identifier>
											class : used
											<symbol> . </symbol>
											<identifier> keyPressed </identifier>
											subroutine : used
											<symbol> ( </symbol>
											<expressionList>
											</expressionList>
											<symbol> ) </symbol>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier> bat </identifier>
									field : used : field 0
									<symbol> . </symbol>
									<identifier> move </identifier>
									subroutine : used
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier> moveBall </identifier>
									subroutine : used
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
							</statements>
							<symbol> } </symbol>
						</whileStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier> exit </identifier>
							field : used : field 3
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<doStatement>
							<keyword> do </keyword>
							<identifier> Output </identifier>
							class : used
							<symbol> . </symbol>
							<identifier> moveCursor </identifier>
							subroutine : used
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<integerConstant> 10 </integerConstant>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 27 </integerConstant>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
							<symbol> ; </symbol>
						</doStatement>
						<doStatement>
							<keyword> do </keyword>
							<identifier> Output </identifier>
							class : used
							<symbol> . </symbol>
							<identifier> printString </identifier>
							subroutine : used
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<stringConstant> Game Over </stringConstant>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
							<symbol> ; </symbol>
						</doStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> moveBall </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> bouncingDirection </identifier>
				var : defined : var 0
				<symbol> , </symbol>
				<identifier> batLeft </identifier>
				var : defined : var 1
				<symbol> , </symbol>
				<identifier> batRight </identifier>
				var : defined : var 2
				<symbol> , </symbol>
				<identifier> ballLeft </identifier>
				var : defined : var 3
				<symbol> , </symbol>
				<identifier> ballRight </identifier>
				var : defined : var 4
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> wall </identifier>
					field : used : field 2
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> ball </identifier>
							field : used : field 1
							<symbol> . </symbol>
							<identifier> move </identifier>
							subroutine : used
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> wall </identifier>
									field : used : field 2
								</term>
								<symbol> &gt; </symbol>
								<term>
									<integerConstant> 0 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
						</term>
						<symbol> &amp; </symbol>
						<term>
							<symbol> ( </symbol>
							<expression>
								<term>
									<symbol> ~ </symbol>
									<term>
										<symbol> ( </symbol>
										<expression>
											<term>
												<identifier> wall </identifier>
												field : used : field 2
											</term>
											<symbol> = </symbol>
											<term>
												<identifier> lastWall </identifier>
												field : used : field 5
											</term>
										</expression>
										<symbol> ) </symbol>
									</term>
								</term>
							</expression>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> lastWall </identifier>
							field : used : field 5
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> wall </identifier>
									field : used : field 2
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> bouncingDirection </identifier>
							var : used : var 0
							<symbol> = </symbol>
							<expression>
								<term>
									<integerConstant> 0 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> batLeft </identifier>
							var : used : var 1
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> bat </identifier>
									field : used : field 0
									<symbol> . </symbol>
									<identifier> getLeft </identifier>
									subroutine : used
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> batRight </identifier>
							var : used : var 2
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> bat </identifier>
									field : used : field 0
									<symbol> . </symbol>
									<identifier> getRight </identifier>
									subroutine : used
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> ballLeft </identifier>
							var : used : var 3
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> ball </identifier>
									field : used : field 1
									<symbol> . </symbol>
									<identifier> getLeft </identifier>
									subroutine : used
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> ballRight </identifier>
							var : used : var 4
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> ball </identifier>
									field : used : field 1
									<symbol> . </symbol>
									<identifier> getRight </identifier>
									subroutine : used
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> wall </identifier>
									field : used : field 2
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 4 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> exit </identifier>
									field : used : field 3
									<symbol> = </symbol>
									<expression>
										<term>
											<symbol> ( </symbol>
											<expression>
												<term>
													<identifier> batLeft </identifier>
													var : used : var 1
												</term>
												<symbol> &gt; </symbol>
												<term>
													<identifier> ballRight </identifier>
													var : used : var 4
												</term>
											</expression>
											<symbol> ) </symbol>
										</term>
										<symbol> | </symbol>
										<term>
											<symbol> ( </symbol>
											<expression>
												<term>
													<identifier> batRight </identifier>
													var : used : var 2
												</term>
												<symbol> &lt; </symbol>
												<term>
													<identifier> ballLeft </identifier>
													var : used : var 3
												</term>
											</expression>
											<symbol> ) </symbol>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<ifStatement>
									<keyword> if </keyword>
									<symbol> ( </symbol>
									<expression>
										<term>
											<symbol> ~ </symbol>
											<term>
												<identifier> exit </identifier>
												field : used : field 3
											</term>
										</term>
									</expression>
									<symbol> ) </symbol>
									<symbol> { </symbol>
									<statements>
										<ifStatement>
											<keyword> if </keyword>
											<symbol> ( </symbol>
											<expression>
												<term>
													<identifier> ballRight </identifier>
													var : used : var 4
												</term>
												<symbol> &lt; </symbol>
												<term>
													<symbol> ( </symbol>
													<expression>
														<term>
															<identifier> batLeft </identifier>
															var : used : var 1
														</term>
														<symbol> + </symbol>
														<term>
															<integerConstant> 10 </integerConstant>
														</term>
													</expression>
													<symbol> ) </symbol>
												</term>
											</expression>
											<symbol> ) </symbol>
											<symbol> { </symbol>
											<statements>
												<letStatement>
													<keyword> let </keyword>
													<identifier> bouncingDirection </identifier>
													var : used : var 0
													<symbol> = </symbol>
													<expression>
														<term>
															<symbol> - </symbol>
															<term>
																<integerConstant> 1 </integerConstant>
															</term>
														</term>
													</expression>
													<symbol> ; </symbol>
												</letStatement>
											</statements>
											<symbol> } </symbol>
											<keyword> else </keyword>
											<symbol> { </symbol>
											<statements>
												<ifStatement>
													<keyword> if </keyword>
													<symbol> ( </symbol>
													<expression>
														<term>
															<identifier> ballLeft </identifier>
															var : used : var 3
														</term>
														<symbol> &gt; </symbol>
														<term>
															<symbol> ( </symbol>
															<expression>
																<term>
																	<identifier> batRight </identifier>
																	var : used : var 2
																</term>
																<symbol> - </symbol>
																<term>
																	<integerConstant> 10 </integerConstant>
																</term>
															</expression>
															<symbol> ) </symbol>
														</term>
													</expression>
													<symbol> ) </symbol>
													<symbol> { </symbol>
													<statements>
														<letStatement>
															<keyword> let </keyword>
															<identifier> bouncingDirection </identifier>
															var : used : var 0
															<symbol> = </symbol>
															<expression>
																<term>
																	<integerConstant> 1 </integerConstant>
																</term>
															</expression>
															<symbol> ; </symbol>
														</letStatement>
													</statements>
													<symbol> } </symbol>
												</ifStatement>
											</statements>
											<symbol> } </symbol>
										</ifStatement>
										<letStatement>
											<keyword> let </keyword>
											<identifier> batWidth </identifier>
											field : used : field 6
											<symbol> = </symbol>
											<expression>
												<term>
													<identifier> batWidth </identifier>
													field : used : field 6
												</term>
												<symbol> - </symbol>
												<term>
													<integerConstant> 2 </integerConstant>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
										<doStatement>
											<keyword> do </keyword>
											<identifier> bat </identifier>
											field : used : field 0
											<symbol> . </symbol>
											<identifier> setWidth </identifier>
											subroutine : used
											<symbol> ( </symbol>
											<expressionList>
												<expression>
													<term>
														<identifier> batWidth </identifier>
														field : used : field 6
													</term>
												</expression>
											</expressionList>
											<symbol> ) </symbol>
											<symbol> ; </symbol>
										</doStatement>
										<letStatement>
											<keyword> let </keyword>
											<identifier> score </identifier>
											field : used : field 4
											<symbol> = </symbol>
											<expression>
												<term>
													<identifier> score </identifier>
													field : used : field 4
												</term>
												<symbol> + </symbol>
												<term>
													<integerConstant> 1 </integerConstant>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
										<doStatement>
											<keyword> do </keyword>
											<identifier> Output </identifier>
											class : used
											<symbol> . </symbol>
											<identifier> moveCursor </identifier>
											subroutine : used
											<symbol> ( </symbol>
											<expressionList>
												<expression>
													<term>
														<integerConstant> 22 </integerConstant>
													</term>
												</expression>
												<symbol> , </symbol>
												<expression>
													<term>
														<integerConstant> 7 </integerConstant>
													</term>
												</expression>
											</expressionList>
											<symbol> ) </symbol>
											<symbol> ; </symbol>
										</doStatement>
										<doStatement>
											<keyword> do </keyword>
											<identifier> Output </identifier>
											class : used
											<symbol> . </symbol>
											<identifier> printInt </identifier>
											subroutine : used
											<symbol> ( </symbol>
											<expressionList>
												<expression>
													<term>
														<identifier> score </identifier>
														field : used : field 4
													</term>
												</expression>
											</expressionList>
											<symbol> ) </symbol>
											<symbol> ; </symbol>
										</doStatement>
									</statements>
									<symbol> } </symbol>
								</ifStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<doStatement>
							<keyword> do </keyword>
							<identifier> ball </identifier>
							field : used : field 1
							<symbol> . </symbol>
							<identifier> bounce </identifier>
							subroutine : used
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<identifier> bouncingDirection </identifier>
										var : used : var 0
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
							<symbol> ; </symbol>
						</doStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<symbol> } </symbol>
</class>
