<class>
	<keyword> class </keyword>
	<identifier> Ball </identifier>
	class : defined
	<symbol> { </symbol>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier> x </identifier>
		field : defined : field 0
		<symbol> , </symbol>
		<identifier> y </identifier>
		field : defined : field 1
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier> lengthx </identifier>
		field : defined : field 2
		<symbol> , </symbol>
		<identifier> lengthy </identifier>
		field : defined : field 3
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier> d </identifier>
		field : defined : field 4
		<symbol> , </symbol>
		<identifier> straightD </identifier>
		field : defined : field 5
		<symbol> , </symbol>
		<identifier> diagonalD </identifier>
		field : defined : field 6
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> boolean </keyword>
		<identifier> invert </identifier>
		field : defined : field 7
		<symbol> , </symbol>
		<identifier> positivex </identifier>
		field : defined : field 8
		<symbol> , </symbol>
		<identifier> positivey </identifier>
		field : defined : field 9
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier> leftWall </identifier>
		field : defined : field 10
		<symbol> , </symbol>
		<identifier> rightWall </identifier>
		field : defined : field 11
		<symbol> , </symbol>
		<identifier> topWall </identifier>
		field : defined : field 12
		<symbol> , </symbol>
		<identifier> bottomWall </identifier>
		field : defined : field 13
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier> wall </identifier>
		field : defined : field 14
		<symbol> ; </symbol>
	</classVarDec>
	<subroutineDec>
		<keyword> constructor </keyword>
		<identifier> Ball </identifier>
		class : used
		<identifier> new </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
			<keyword> int </keyword>
			<identifier> Ax </identifier>
			argument : defined : argument 0
			<symbol> , </symbol>
			<keyword> int </keyword>
			<identifier> Ay </identifier>
			argument : defined : argument 1
			<symbol> , </symbol>
			<keyword> int </keyword>
			<identifier> AleftWall </identifier>
			argument : defined : argument 2
			<symbol> , </symbol>
			<keyword> int </keyword>
			<identifier> ArightWall </identifier>
			argument : defined : argument 3
			<symbol> , </symbol>
			<keyword> int </keyword>
			<identifier> AtopWall </identifier>
			argument : defined : argument 4
			<symbol> , </symbol>
			<keyword> int </keyword>
			<identifier> AbottomWall </identifier>
			argument : defined : argument 5
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> x </identifier>
					field : used : field 0
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> Ax </identifier>
							argument : used : argument 0
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> y </identifier>
					field : used : field 1
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> Ay </identifier>
							argument : used : argument 1
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> leftWall </identifier>
					field : used : field 10
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> AleftWall </identifier>
							argument : used : argument 2
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> rightWall </identifier>
					field : used : field 11
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> ArightWall </identifier>
							argument : used : argument 3
						</term>
						<symbol> - </symbol>
						<term>
							<integerConstant> 6 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> topWall </identifier>
					field : used : field 12
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> AtopWall </identifier>
							argument : used : argument 4
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> bottomWall </identifier>
					field : used : field 13
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> AbottomWall </identifier>
							argument : used : argument 5
						</term>
						<symbol> - </symbol>
						<term>
							<integerConstant> 6 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> wall </identifier>
					field : used : field 14
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> show </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<expression>
						<term>
							<keyword> this </keyword>
						</term>
					</expression>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> dispose </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Memory </identifier>
					class : used
					<symbol> . </symbol>
					<identifier> deAlloc </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<keyword> this </keyword>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> show </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Screen </identifier>
					class : used
					<symbol> . </symbol>
					<identifier> setColor </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<keyword> true </keyword>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> draw </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> hide </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Screen </identifier>
					class : used
					<symbol> . </symbol>
					<identifier> setColor </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<keyword> false </keyword>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> draw </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> draw </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Screen </identifier>
					class : used
					<symbol> . </symbol>
					<identifier> drawRectangle </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> x </identifier>
								field : used : field 0
							</term>
						</expression>
						<symbol> , </symbol>
						<expression>
							<term>
								<identifier> y </identifier>
								field : used : field 1
							</term>
						</expression>
						<symbol> , </symbol>
						<expression>
							<term>
								<identifier> x </identifier>
								field : used : field 0
							</term>
							<symbol> + </symbol>
							<term>
								<integerConstant> 5 </integerConstant>
							</term>
						</expression>
						<symbol> , </symbol>
						<expression>
							<term>
								<identifier> y </identifier>
								field : used : field 1
							</term>
							<symbol> + </symbol>
							<term>
								<integerConstant> 5 </integerConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> int </keyword>
		<identifier> getLeft </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<returnStatement>
					<keyword> return </keyword>
					<expression>
						<term>
							<identifier> x </identifier>
							field : used : field 0
						</term>
					</expression>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> int </keyword>
		<identifier> getRight </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<returnStatement>
					<keyword> return </keyword>
					<expression>
						<term>
							<identifier> x </identifier>
							field : used : field 0
						</term>
						<symbol> + </symbol>
						<term>
							<integerConstant> 5 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> setDestination </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
			<keyword> int </keyword>
			<identifier> destx </identifier>
			argument : defined : argument 1
			<symbol> , </symbol>
			<keyword> int </keyword>
			<identifier> desty </identifier>
			argument : defined : argument 2
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> dx </identifier>
				var : defined : var 0
				<symbol> , </symbol>
				<identifier> dy </identifier>
				var : defined : var 1
				<symbol> , </symbol>
				<identifier> temp </identifier>
				var : defined : var 2
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> lengthx </identifier>
					field : used : field 2
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> destx </identifier>
							argument : used : argument 1
						</term>
						<symbol> - </symbol>
						<term>
							<identifier> x </identifier>
							field : used : field 0
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> lengthy </identifier>
					field : used : field 3
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> desty </identifier>
							argument : used : argument 2
						</term>
						<symbol> - </symbol>
						<term>
							<identifier> y </identifier>
							field : used : field 1
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> dx </identifier>
					var : used : var 0
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> Math </identifier>
							class : used
							<symbol> . </symbol>
							<identifier> abs </identifier>
							subroutine : used
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<identifier> lengthx </identifier>
										field : used : field 2
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> dy </identifier>
					var : used : var 1
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> Math </identifier>
							class : used
							<symbol> . </symbol>
							<identifier> abs </identifier>
							subroutine : used
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<identifier> lengthy </identifier>
										field : used : field 3
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> invert </identifier>
					field : used : field 7
					<symbol> = </symbol>
					<expression>
						<term>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> dx </identifier>
									var : used : var 0
								</term>
								<symbol> &lt; </symbol>
								<term>
									<identifier> dy </identifier>
									var : used : var 1
								</term>
							</expression>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier> invert </identifier>
							field : used : field 7
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> temp </identifier>
							var : used : var 2
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> dx </identifier>
									var : used : var 0
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> dx </identifier>
							var : used : var 0
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> dy </identifier>
									var : used : var 1
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> dy </identifier>
							var : used : var 1
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> temp </identifier>
									var : used : var 2
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> positivex </identifier>
							field : used : field 8
							<symbol> = </symbol>
							<expression>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<identifier> y </identifier>
											field : used : field 1
										</term>
										<symbol> &lt; </symbol>
										<term>
											<identifier> desty </identifier>
											argument : used : argument 2
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> positivey </identifier>
							field : used : field 9
							<symbol> = </symbol>
							<expression>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<identifier> x </identifier>
											field : used : field 0
										</term>
										<symbol> &lt; </symbol>
										<term>
											<identifier> destx </identifier>
											argument : used : argument 1
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
					<keyword> else </keyword>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> positivex </identifier>
							field : used : field 8
							<symbol> = </symbol>
							<expression>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<identifier> x </identifier>
											field : used : field 0
										</term>
										<symbol> &lt; </symbol>
										<term>
											<identifier> destx </identifier>
											argument : used : argument 1
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> positivey </identifier>
							field : used : field 9
							<symbol> = </symbol>
							<expression>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<identifier> y </identifier>
											field : used : field 1
										</term>
										<symbol> &lt; </symbol>
										<term>
											<identifier> desty </identifier>
											argument : used : argument 2
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> d </identifier>
					field : used : field 4
					<symbol> = </symbol>
					<expression>
						<term>
							<symbol> ( </symbol>
							<expression>
								<term>
									<integerConstant> 2 </integerConstant>
								</term>
								<symbol> * </symbol>
								<term>
									<identifier> dy </identifier>
									var : used : var 1
								</term>
							</expression>
							<symbol> ) </symbol>
						</term>
						<symbol> - </symbol>
						<term>
							<identifier> dx </identifier>
							var : used : var 0
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> straightD </identifier>
					field : used : field 5
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 2 </integerConstant>
						</term>
						<symbol> * </symbol>
						<term>
							<identifier> dy </identifier>
							var : used : var 1
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> diagonalD </identifier>
					field : used : field 6
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 2 </integerConstant>
						</term>
						<symbol> * </symbol>
						<term>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> dy </identifier>
									var : used : var 1
								</term>
								<symbol> - </symbol>
								<term>
									<identifier> dx </identifier>
									var : used : var 0
								</term>
							</expression>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> int </keyword>
		<identifier> move </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier> hide </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier> d </identifier>
							field : used : field 4
						</term>
						<symbol> &lt; </symbol>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> d </identifier>
							field : used : field 4
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> d </identifier>
									field : used : field 4
								</term>
								<symbol> + </symbol>
								<term>
									<identifier> straightD </identifier>
									field : used : field 5
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
					<keyword> else </keyword>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> d </identifier>
							field : used : field 4
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> d </identifier>
									field : used : field 4
								</term>
								<symbol> + </symbol>
								<term>
									<identifier> diagonalD </identifier>
									field : used : field 6
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> positivey </identifier>
									field : used : field 9
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<ifStatement>
									<keyword> if </keyword>
									<symbol> ( </symbol>
									<expression>
										<term>
											<identifier> invert </identifier>
											field : used : field 7
										</term>
									</expression>
									<symbol> ) </symbol>
									<symbol> { </symbol>
									<statements>
										<letStatement>
											<keyword> let </keyword>
											<identifier> x </identifier>
											field : used : field 0
											<symbol> = </symbol>
											<expression>
												<term>
													<identifier> x </identifier>
													field : used : field 0
												</term>
												<symbol> + </symbol>
												<term>
													<integerConstant> 4 </integerConstant>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
									</statements>
									<symbol> } </symbol>
									<keyword> else </keyword>
									<symbol> { </symbol>
									<statements>
										<letStatement>
											<keyword> let </keyword>
											<identifier> y </identifier>
											field : used : field 1
											<symbol> = </symbol>
											<expression>
												<term>
													<identifier> y </identifier>
													field : used : field 1
												</term>
												<symbol> + </symbol>
												<term>
													<integerConstant> 4 </integerConstant>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
									</statements>
									<symbol> } </symbol>
								</ifStatement>
							</statements>
							<symbol> } </symbol>
							<keyword> else </keyword>
							<symbol> { </symbol>
							<statements>
								<ifStatement>
									<keyword> if </keyword>
									<symbol> ( </symbol>
									<expression>
										<term>
											<identifier> invert </identifier>
											field : used : field 7
										</term>
									</expression>
									<symbol> ) </symbol>
									<symbol> { </symbol>
									<statements>
										<letStatement>
											<keyword> let </keyword>
											<identifier> x </identifier>
											field : used : field 0
											<symbol> = </symbol>
											<expression>
												<term>
													<identifier> x </identifier>
													field : used : field 0
												</term>
												<symbol> - </symbol>
												<term>
													<integerConstant> 4 </integerConstant>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
									</statements>
									<symbol> } </symbol>
									<keyword> else </keyword>
									<symbol> { </symbol>
									<statements>
										<letStatement>
											<keyword> let </keyword>
											<identifier> y </identifier>
											field : used : field 1
											<symbol> = </symbol>
											<expression>
												<term>
													<identifier> y </identifier>
													field : used : field 1
												</term>
												<symbol> - </symbol>
												<term>
													<integerConstant> 4 </integerConstant>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
									</statements>
									<symbol> } </symbol>
								</ifStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier> positivex </identifier>
							field : used : field 8
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> invert </identifier>
									field : used : field 7
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> y </identifier>
									field : used : field 1
									<symbol> = </symbol>
									<expression>
										<term>
											<identifier> y </identifier>
											field : used : field 1
										</term>
										<symbol> + </symbol>
										<term>
											<integerConstant> 4 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
							<keyword> else </keyword>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> x </identifier>
									field : used : field 0
									<symbol> = </symbol>
									<expression>
										<term>
											<identifier> x </identifier>
											field : used : field 0
										</term>
										<symbol> + </symbol>
										<term>
											<integerConstant> 4 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
					</statements>
					<symbol> } </symbol>
					<keyword> else </keyword>
					<symbol> { </symbol>
					<statements>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> invert </identifier>
									field : used : field 7
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> y </identifier>
									field : used : field 1
									<symbol> = </symbol>
									<expression>
										<term>
											<identifier> y </identifier>
											field : used : field 1
										</term>
										<symbol> - </symbol>
										<term>
											<integerConstant> 4 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
							<keyword> else </keyword>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> x </identifier>
									field : used : field 0
									<symbol> = </symbol>
									<expression>
										<term>
											<identifier> x </identifier>
											field : used : field 0
										</term>
										<symbol> - </symbol>
										<term>
											<integerConstant> 4 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ~ </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<identifier> x </identifier>
										field : used : field 0
									</term>
									<symbol> &gt; </symbol>
									<term>
										<identifier> leftWall </identifier>
										field : used : field 10
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> wall </identifier>
							field : used : field 14
							<symbol> = </symbol>
							<expression>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> x </identifier>
							field : used : field 0
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> leftWall </identifier>
									field : used : field 10
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ~ </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<identifier> x </identifier>
										field : used : field 0
									</term>
									<symbol> &lt; </symbol>
									<term>
										<identifier> rightWall </identifier>
										field : used : field 11
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> wall </identifier>
							field : used : field 14
							<symbol> = </symbol>
							<expression>
								<term>
									<integerConstant> 2 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> x </identifier>
							field : used : field 0
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> rightWall </identifier>
									field : used : field 11
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ~ </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<identifier> y </identifier>
										field : used : field 1
									</term>
									<symbol> &gt; </symbol>
									<term>
										<identifier> topWall </identifier>
										field : used : field 12
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> wall </identifier>
							field : used : field 14
							<symbol> = </symbol>
							<expression>
								<term>
									<integerConstant> 3 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> y </identifier>
							field : used : field 1
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> topWall </identifier>
									field : used : field 12
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ~ </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<identifier> y </identifier>
										field : used : field 1
									</term>
									<symbol> &lt; </symbol>
									<term>
										<identifier> bottomWall </identifier>
										field : used : field 13
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> wall </identifier>
							field : used : field 14
							<symbol> = </symbol>
							<expression>
								<term>
									<integerConstant> 4 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> y </identifier>
							field : used : field 1
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> bottomWall </identifier>
									field : used : field 13
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> show </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<expression>
						<term>
							<identifier> wall </identifier>
							field : used : field 14
						</term>
					</expression>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> bounce </identifier>
		subroutine : defined
		<symbol> ( </symbol>
		<parameterList>
			<keyword> int </keyword>
			<identifier> bouncingDirection </identifier>
			argument : defined : argument 1
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> newx </identifier>
				var : defined : var 0
				<symbol> , </symbol>
				<identifier> newy </identifier>
				var : defined : var 1
				<symbol> , </symbol>
				<identifier> divLengthx </identifier>
				var : defined : var 2
				<symbol> , </symbol>
				<identifier> divLengthy </identifier>
				var : defined : var 3
				<symbol> , </symbol>
				<identifier> factor </identifier>
				var : defined : var 4
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> divLengthx </identifier>
					var : used : var 2
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> lengthx </identifier>
							field : used : field 2
						</term>
						<symbol> / </symbol>
						<term>
							<integerConstant> 10 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> divLengthy </identifier>
					var : used : var 3
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> lengthy </identifier>
							field : used : field 3
						</term>
						<symbol> / </symbol>
						<term>
							<integerConstant> 10 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier> bouncingDirection </identifier>
							argument : used : argument 1
						</term>
						<symbol> = </symbol>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> factor </identifier>
							var : used : var 4
							<symbol> = </symbol>
							<expression>
								<term>
									<integerConstant> 10 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
					<keyword> else </keyword>
					<symbol> { </symbol>
					<statements>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<symbol> ( </symbol>
											<expression>
												<term>
													<symbol> ~ </symbol>
													<term>
														<symbol> ( </symbol>
														<expression>
															<term>
																<identifier> lengthx </identifier>
																field : used : field 2
															</term>
															<symbol> &lt; </symbol>
															<term>
																<integerConstant> 0 </integerConstant>
															</term>
														</expression>
														<symbol> ) </symbol>
													</term>
												</term>
											</expression>
											<symbol> ) </symbol>
										</term>
										<symbol> &amp; </symbol>
										<term>
											<symbol> ( </symbol>
											<expression>
												<term>
													<identifier> bouncingDirection </identifier>
													argument : used : argument 1
												</term>
												<symbol> = </symbol>
												<term>
													<integerConstant> 1 </integerConstant>
												</term>
											</expression>
											<symbol> ) </symbol>
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
								<symbol> | </symbol>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<symbol> ( </symbol>
											<expression>
												<term>
													<identifier> lengthx </identifier>
													field : used : field 2
												</term>
												<symbol> &lt; </symbol>
												<term>
													<integerConstant> 0 </integerConstant>
												</term>
											</expression>
											<symbol> ) </symbol>
										</term>
										<symbol> &amp; </symbol>
										<term>
											<symbol> ( </symbol>
											<expression>
												<term>
													<identifier> bouncingDirection </identifier>
													argument : used : argument 1
												</term>
												<symbol> = </symbol>
												<term>
													<symbol> ( </symbol>
													<expression>
														<term>
															<symbol> - </symbol>
															<term>
																<integerConstant> 1 </integerConstant>
															</term>
														</term>
													</expression>
													<symbol> ) </symbol>
												</term>
											</expression>
											<symbol> ) </symbol>
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> factor </identifier>
									var : used : var 4
									<symbol> = </symbol>
									<expression>
										<term>
											<integerConstant> 20 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
							<keyword> else </keyword>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> factor </identifier>
									var : used : var 4
									<symbol> = </symbol>
									<expression>
										<term>
											<integerConstant> 5 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier> wall </identifier>
							field : used : field 14
						</term>
						<symbol> = </symbol>
						<term>
							<integerConstant> 1 </integerConstant>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> newx </identifier>
							var : used : var 0
							<symbol> = </symbol>
							<expression>
								<term>
									<integerConstant> 506 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> newy </identifier>
							var : used : var 1
							<symbol> = </symbol>
							<expression>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<identifier> divLengthy </identifier>
											var : used : var 3
										</term>
										<symbol> * </symbol>
										<term>
											<symbol> ( </symbol>
											<expression>
												<term>
													<symbol> - </symbol>
													<term>
														<integerConstant> 50 </integerConstant>
													</term>
												</term>
											</expression>
											<symbol> ) </symbol>
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
								<symbol> / </symbol>
								<term>
									<identifier> divLengthx </identifier>
									var : used : var 2
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> newy </identifier>
							var : used : var 1
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> y </identifier>
									field : used : field 1
								</term>
								<symbol> + </symbol>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<identifier> newy </identifier>
											var : used : var 1
										</term>
										<symbol> * </symbol>
										<term>
											<identifier> factor </identifier>
											var : used : var 4
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
					<keyword> else </keyword>
					<symbol> { </symbol>
					<statements>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> wall </identifier>
									field : used : field 14
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 2 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> newx </identifier>
									var : used : var 0
									<symbol> = </symbol>
									<expression>
										<term>
											<integerConstant> 0 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<letStatement>
									<keyword> let </keyword>
									<identifier> newy </identifier>
									var : used : var 1
									<symbol> = </symbol>
									<expression>
										<term>
											<symbol> ( </symbol>
											<expression>
												<term>
													<identifier> divLengthy </identifier>
													var : used : var 3
												</term>
												<symbol> * </symbol>
												<term>
													<integerConstant> 50 </integerConstant>
												</term>
											</expression>
											<symbol> ) </symbol>
										</term>
										<symbol> / </symbol>
										<term>
											<identifier> divLengthx </identifier>
											var : used : var 2
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<letStatement>
									<keyword> let </keyword>
									<identifier> newy </identifier>
									var : used : var 1
									<symbol> = </symbol>
									<expression>
										<term>
											<identifier> y </identifier>
											field : used : field 1
										</term>
										<symbol> + </symbol>
										<term>
											<symbol> ( </symbol>
											<expression>
												<term>
													<identifier> newy </identifier>
													var : used : var 1
												</term>
												<symbol> * </symbol>
												<term>
													<identifier> factor </identifier>
													var : used : var 4
												</term>
											</expression>
											<symbol> ) </symbol>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
							<keyword> else </keyword>
							<symbol> { </symbol>
							<statements>
								<ifStatement>
									<keyword> if </keyword>
									<symbol> ( </symbol>
									<expression>
										<term>
											<identifier> wall </identifier>
											field : used : field 14
										</term>
										<symbol> = </symbol>
										<term>
											<integerConstant> 3 </integerConstant>
										</term>
									</expression>
									<symbol> ) </symbol>
									<symbol> { </symbol>
									<statements>
										<letStatement>
											<keyword> let </keyword>
											<identifier> newy </identifier>
											var : used : var 1
											<symbol> = </symbol>
											<expression>
												<term>
													<integerConstant> 250 </integerConstant>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
										<letStatement>
											<keyword> let </keyword>
											<identifier> newx </identifier>
											var : used : var 0
											<symbol> = </symbol>
											<expression>
												<term>
													<symbol> ( </symbol>
													<expression>
														<term>
															<identifier> divLengthx </identifier>
															var : used : var 2
														</term>
														<symbol> * </symbol>
														<term>
															<symbol> ( </symbol>
															<expression>
																<term>
																	<symbol> - </symbol>
																	<term>
																		<integerConstant> 25 </integerConstant>
																	</term>
																</term>
															</expression>
															<symbol> ) </symbol>
														</term>
													</expression>
													<symbol> ) </symbol>
												</term>
												<symbol> / </symbol>
												<term>
													<identifier> divLengthy </identifier>
													var : used : var 3
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
										<letStatement>
											<keyword> let </keyword>
											<identifier> newx </identifier>
											var : used : var 0
											<symbol> = </symbol>
											<expression>
												<term>
													<identifier> x </identifier>
													field : used : field 0
												</term>
												<symbol> + </symbol>
												<term>
													<symbol> ( </symbol>
													<expression>
														<term>
															<identifier> newx </identifier>
															var : used : var 0
														</term>
														<symbol> * </symbol>
														<term>
															<identifier> factor </identifier>
															var : used : var 4
														</term>
													</expression>
													<symbol> ) </symbol>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
									</statements>
									<symbol> } </symbol>
									<keyword> else </keyword>
									<symbol> { </symbol>
									<statements>
										<letStatement>
											<keyword> let </keyword>
											<identifier> newy </identifier>
											var : used : var 1
											<symbol> = </symbol>
											<expression>
												<term>
													<integerConstant> 0 </integerConstant>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
										<letStatement>
											<keyword> let </keyword>
											<identifier> newx </identifier>
											var : used : var 0
											<symbol> = </symbol>
											<expression>
												<term>
													<symbol> ( </symbol>
													<expression>
														<term>
															<identifier> divLengthx </identifier>
															var : used : var 2
														</term>
														<symbol> * </symbol>
														<term>
															<integerConstant> 25 </integerConstant>
														</term>
													</expression>
													<symbol> ) </symbol>
												</term>
												<symbol> / </symbol>
												<term>
													<identifier> divLengthy </identifier>
													var : used : var 3
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
										<letStatement>
											<keyword> let </keyword>
											<identifier> newx </identifier>
											var : used : var 0
											<symbol> = </symbol>
											<expression>
												<term>
													<identifier> x </identifier>
													field : used : field 0
												</term>
												<symbol> + </symbol>
												<term>
													<symbol> ( </symbol>
													<expression>
														<term>
															<identifier> newx </identifier>
															var : used : var 0
														</term>
														<symbol> * </symbol>
														<term>
															<identifier> factor </identifier>
															var : used : var 4
														</term>
													</expression>
													<symbol> ) </symbol>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
									</statements>
									<symbol> } </symbol>
								</ifStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> setDestination </identifier>
					subroutine : used
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> newx </identifier>
								var : used : var 0
							</term>
						</expression>
						<symbol> , </symbol>
						<expression>
							<term>
								<identifier> newy </identifier>
								var : used : var 1
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<symbol> } </symbol>
</class>
