<tokens>
	<KEYWORD> class </KEYWORD>
	<IDENTIFIER> SquareGame </IDENTIFIER>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> field </KEYWORD>
	<IDENTIFIER> Square </IDENTIFIER>
	<IDENTIFIER> square </IDENTIFIER>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> field </KEYWORD>
	<KEYWORD> int </KEYWORD>
	<IDENTIFIER> direction </IDENTIFIER>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> constructor </KEYWORD>
	<IDENTIFIER> SquareGame </IDENTIFIER>
	<IDENTIFIER> new </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> let </KEYWORD>
	<IDENTIFIER> square </IDENTIFIER>
	<SYMBOL> = </SYMBOL>
	<IDENTIFIER> Square </IDENTIFIER>
	<SYMBOL> . </SYMBOL>
	<IDENTIFIER> new </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<INT_CONST> 0 </INT_CONST>
	<SYMBOL> , </SYMBOL>
	<INT_CONST> 0 </INT_CONST>
	<SYMBOL> , </SYMBOL>
	<INT_CONST> 30 </INT_CONST>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> let </KEYWORD>
	<IDENTIFIER> direction </IDENTIFIER>
	<SYMBOL> = </SYMBOL>
	<INT_CONST> 0 </INT_CONST>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> return </KEYWORD>
	<KEYWORD> this </KEYWORD>
	<SYMBOL> ; </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<KEYWORD> method </KEYWORD>
	<KEYWORD> void </KEYWORD>
	<IDENTIFIER> dispose </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> square </IDENTIFIER>
	<SYMBOL> . </SYMBOL>
	<IDENTIFIER> dispose </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> Memory </IDENTIFIER>
	<SYMBOL> . </SYMBOL>
	<IDENTIFIER> deAlloc </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<KEYWORD> this </KEYWORD>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> return </KEYWORD>
	<SYMBOL> ; </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<KEYWORD> method </KEYWORD>
	<KEYWORD> void </KEYWORD>
	<IDENTIFIER> run </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> var </KEYWORD>
	<KEYWORD> char </KEYWORD>
	<IDENTIFIER> key </IDENTIFIER>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> var </KEYWORD>
	<KEYWORD> boolean </KEYWORD>
	<IDENTIFIER> exit </IDENTIFIER>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> let </KEYWORD>
	<IDENTIFIER> exit </IDENTIFIER>
	<SYMBOL> = </SYMBOL>
	<KEYWORD> false </KEYWORD>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> while </KEYWORD>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ~ </SYMBOL>
	<IDENTIFIER> exit </IDENTIFIER>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> while </KEYWORD>
	<SYMBOL> ( </SYMBOL>
	<IDENTIFIER> key </IDENTIFIER>
	<SYMBOL> = </SYMBOL>
	<INT_CONST> 0 </INT_CONST>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> let </KEYWORD>
	<IDENTIFIER> key </IDENTIFIER>
	<SYMBOL> = </SYMBOL>
	<IDENTIFIER> Keyboard </IDENTIFIER>
	<SYMBOL> . </SYMBOL>
	<IDENTIFIER> keyPressed </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> moveSquare </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<KEYWORD> if </KEYWORD>
	<SYMBOL> ( </SYMBOL>
	<IDENTIFIER> key </IDENTIFIER>
	<SYMBOL> = </SYMBOL>
	<INT_CONST> 81 </INT_CONST>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> let </KEYWORD>
	<IDENTIFIER> exit </IDENTIFIER>
	<SYMBOL> = </SYMBOL>
	<KEYWORD> true </KEYWORD>
	<SYMBOL> ; </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<KEYWORD> if </KEYWORD>
	<SYMBOL> ( </SYMBOL>
	<IDENTIFIER> key </IDENTIFIER>
	<SYMBOL> = </SYMBOL>
	<INT_CONST> 90 </INT_CONST>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> square </IDENTIFIER>
	<SYMBOL> . </SYMBOL>
	<IDENTIFIER> decSize </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<KEYWORD> if </KEYWORD>
	<SYMBOL> ( </SYMBOL>
	<IDENTIFIER> key </IDENTIFIER>
	<SYMBOL> = </SYMBOL>
	<INT_CONST> 88 </INT_CONST>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> square </IDENTIFIER>
	<SYMBOL> . </SYMBOL>
	<IDENTIFIER> incSize </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<KEYWORD> if </KEYWORD>
	<SYMBOL> ( </SYMBOL>
	<IDENTIFIER> key </IDENTIFIER>
	<SYMBOL> = </SYMBOL>
	<INT_CONST> 131 </INT_CONST>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> let </KEYWORD>
	<IDENTIFIER> direction </IDENTIFIER>
	<SYMBOL> = </SYMBOL>
	<INT_CONST> 1 </INT_CONST>
	<SYMBOL> ; </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<KEYWORD> if </KEYWORD>
	<SYMBOL> ( </SYMBOL>
	<IDENTIFIER> key </IDENTIFIER>
	<SYMBOL> = </SYMBOL>
	<INT_CONST> 133 </INT_CONST>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> let </KEYWORD>
	<IDENTIFIER> direction </IDENTIFIER>
	<SYMBOL> = </SYMBOL>
	<INT_CONST> 2 </INT_CONST>
	<SYMBOL> ; </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<KEYWORD> if </KEYWORD>
	<SYMBOL> ( </SYMBOL>
	<IDENTIFIER> key </IDENTIFIER>
	<SYMBOL> = </SYMBOL>
	<INT_CONST> 130 </INT_CONST>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> let </KEYWORD>
	<IDENTIFIER> direction </IDENTIFIER>
	<SYMBOL> = </SYMBOL>
	<INT_CONST> 3 </INT_CONST>
	<SYMBOL> ; </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<KEYWORD> if </KEYWORD>
	<SYMBOL> ( </SYMBOL>
	<IDENTIFIER> key </IDENTIFIER>
	<SYMBOL> = </SYMBOL>
	<INT_CONST> 132 </INT_CONST>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> let </KEYWORD>
	<IDENTIFIER> direction </IDENTIFIER>
	<SYMBOL> = </SYMBOL>
	<INT_CONST> 4 </INT_CONST>
	<SYMBOL> ; </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<KEYWORD> while </KEYWORD>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ~ </SYMBOL>
	<SYMBOL> ( </SYMBOL>
	<IDENTIFIER> key </IDENTIFIER>
	<SYMBOL> = </SYMBOL>
	<INT_CONST> 0 </INT_CONST>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> let </KEYWORD>
	<IDENTIFIER> key </IDENTIFIER>
	<SYMBOL> = </SYMBOL>
	<IDENTIFIER> Keyboard </IDENTIFIER>
	<SYMBOL> . </SYMBOL>
	<IDENTIFIER> keyPressed </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> moveSquare </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<KEYWORD> return </KEYWORD>
	<SYMBOL> ; </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<KEYWORD> method </KEYWORD>
	<KEYWORD> void </KEYWORD>
	<IDENTIFIER> moveSquare </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> if </KEYWORD>
	<SYMBOL> ( </SYMBOL>
	<IDENTIFIER> direction </IDENTIFIER>
	<SYMBOL> = </SYMBOL>
	<INT_CONST> 1 </INT_CONST>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> square </IDENTIFIER>
	<SYMBOL> . </SYMBOL>
	<IDENTIFIER> moveUp </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<KEYWORD> if </KEYWORD>
	<SYMBOL> ( </SYMBOL>
	<IDENTIFIER> direction </IDENTIFIER>
	<SYMBOL> = </SYMBOL>
	<INT_CONST> 2 </INT_CONST>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> square </IDENTIFIER>
	<SYMBOL> . </SYMBOL>
	<IDENTIFIER> moveDown </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<KEYWORD> if </KEYWORD>
	<SYMBOL> ( </SYMBOL>
	<IDENTIFIER> direction </IDENTIFIER>
	<SYMBOL> = </SYMBOL>
	<INT_CONST> 3 </INT_CONST>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> square </IDENTIFIER>
	<SYMBOL> . </SYMBOL>
	<IDENTIFIER> moveLeft </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<KEYWORD> if </KEYWORD>
	<SYMBOL> ( </SYMBOL>
	<IDENTIFIER> direction </IDENTIFIER>
	<SYMBOL> = </SYMBOL>
	<INT_CONST> 4 </INT_CONST>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> square </IDENTIFIER>
	<SYMBOL> . </SYMBOL>
	<IDENTIFIER> moveRight </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> Sys </IDENTIFIER>
	<SYMBOL> . </SYMBOL>
	<IDENTIFIER> wait </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<INT_CONST> 5 </INT_CONST>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> return </KEYWORD>
	<SYMBOL> ; </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<SYMBOL> } </SYMBOL>
</tokens>