<tokens>
	<KEYWORD> class </KEYWORD>
	<IDENTIFIER> Square </IDENTIFIER>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> field </KEYWORD>
	<KEYWORD> int </KEYWORD>
	<IDENTIFIER> x </IDENTIFIER>
	<SYMBOL> , </SYMBOL>
	<IDENTIFIER> y </IDENTIFIER>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> field </KEYWORD>
	<KEYWORD> int </KEYWORD>
	<IDENTIFIER> size </IDENTIFIER>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> constructor </KEYWORD>
	<IDENTIFIER> Square </IDENTIFIER>
	<IDENTIFIER> new </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<KEYWORD> int </KEYWORD>
	<IDENTIFIER> Ax </IDENTIFIER>
	<SYMBOL> , </SYMBOL>
	<KEYWORD> int </KEYWORD>
	<IDENTIFIER> Ay </IDENTIFIER>
	<SYMBOL> , </SYMBOL>
	<KEYWORD> int </KEYWORD>
	<IDENTIFIER> Asize </IDENTIFIER>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> let </KEYWORD>
	<IDENTIFIER> x </IDENTIFIER>
	<SYMBOL> = </SYMBOL>
	<IDENTIFIER> Ax </IDENTIFIER>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> let </KEYWORD>
	<IDENTIFIER> y </IDENTIFIER>
	<SYMBOL> = </SYMBOL>
	<IDENTIFIER> Ay </IDENTIFIER>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> let </KEYWORD>
	<IDENTIFIER> size </IDENTIFIER>
	<SYMBOL> = </SYMBOL>
	<IDENTIFIER> Asize </IDENTIFIER>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> draw </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> return </KEYWORD>
	<KEYWORD> this </KEYWORD>
	<SYMBOL> ; </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<KEYWORD> method </KEYWORD>
	<KEYWORD> void </KEYWORD>
	<IDENTIFIER> dispose </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> Memory </IDENTIFIER>
	<SYMBOL> . </SYMBOL>
	<IDENTIFIER> deAlloc </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<KEYWORD> this </KEYWORD>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> return </KEYWORD>
	<SYMBOL> ; </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<KEYWORD> method </KEYWORD>
	<KEYWORD> void </KEYWORD>
	<IDENTIFIER> draw </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> Screen </IDENTIFIER>
	<SYMBOL> . </SYMBOL>
	<IDENTIFIER> setColor </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<KEYWORD> true </KEYWORD>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> Screen </IDENTIFIER>
	<SYMBOL> . </SYMBOL>
	<IDENTIFIER> drawRectangle </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<IDENTIFIER> x </IDENTIFIER>
	<SYMBOL> , </SYMBOL>
	<IDENTIFIER> y </IDENTIFIER>
	<SYMBOL> , </SYMBOL>
	<IDENTIFIER> x </IDENTIFIER>
	<SYMBOL> + </SYMBOL>
	<IDENTIFIER> size </IDENTIFIER>
	<SYMBOL> , </SYMBOL>
	<IDENTIFIER> y </IDENTIFIER>
	<SYMBOL> + </SYMBOL>
	<IDENTIFIER> size </IDENTIFIER>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> return </KEYWORD>
	<SYMBOL> ; </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<KEYWORD> method </KEYWORD>
	<KEYWORD> void </KEYWORD>
	<IDENTIFIER> erase </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> Screen </IDENTIFIER>
	<SYMBOL> . </SYMBOL>
	<IDENTIFIER> setColor </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<KEYWORD> false </KEYWORD>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> Screen </IDENTIFIER>
	<SYMBOL> . </SYMBOL>
	<IDENTIFIER> drawRectangle </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<IDENTIFIER> x </IDENTIFIER>
	<SYMBOL> , </SYMBOL>
	<IDENTIFIER> y </IDENTIFIER>
	<SYMBOL> , </SYMBOL>
	<IDENTIFIER> x </IDENTIFIER>
	<SYMBOL> + </SYMBOL>
	<IDENTIFIER> size </IDENTIFIER>
	<SYMBOL> , </SYMBOL>
	<IDENTIFIER> y </IDENTIFIER>
	<SYMBOL> + </SYMBOL>
	<IDENTIFIER> size </IDENTIFIER>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> return </KEYWORD>
	<SYMBOL> ; </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<KEYWORD> method </KEYWORD>
	<KEYWORD> void </KEYWORD>
	<IDENTIFIER> incSize </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> if </KEYWORD>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ( </SYMBOL>
	<IDENTIFIER> y </IDENTIFIER>
	<SYMBOL> + </SYMBOL>
	<IDENTIFIER> size </IDENTIFIER>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> &lt; </SYMBOL>
	<INT_CONST> 254 </INT_CONST>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> &amp; </SYMBOL>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ( </SYMBOL>
	<IDENTIFIER> x </IDENTIFIER>
	<SYMBOL> + </SYMBOL>
	<IDENTIFIER> size </IDENTIFIER>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> &lt; </SYMBOL>
	<INT_CONST> 510 </INT_CONST>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> erase </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> let </KEYWORD>
	<IDENTIFIER> size </IDENTIFIER>
	<SYMBOL> = </SYMBOL>
	<IDENTIFIER> size </IDENTIFIER>
	<SYMBOL> + </SYMBOL>
	<INT_CONST> 2 </INT_CONST>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> draw </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<KEYWORD> return </KEYWORD>
	<SYMBOL> ; </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<KEYWORD> method </KEYWORD>
	<KEYWORD> void </KEYWORD>
	<IDENTIFIER> decSize </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> if </KEYWORD>
	<SYMBOL> ( </SYMBOL>
	<IDENTIFIER> size </IDENTIFIER>
	<SYMBOL> &gt; </SYMBOL>
	<INT_CONST> 2 </INT_CONST>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> erase </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> let </KEYWORD>
	<IDENTIFIER> size </IDENTIFIER>
	<SYMBOL> = </SYMBOL>
	<IDENTIFIER> size </IDENTIFIER>
	<SYMBOL> - </SYMBOL>
	<INT_CONST> 2 </INT_CONST>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> draw </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<KEYWORD> return </KEYWORD>
	<SYMBOL> ; </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<KEYWORD> method </KEYWORD>
	<KEYWORD> void </KEYWORD>
	<IDENTIFIER> moveUp </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> if </KEYWORD>
	<SYMBOL> ( </SYMBOL>
	<IDENTIFIER> y </IDENTIFIER>
	<SYMBOL> &gt; </SYMBOL>
	<INT_CONST> 1 </INT_CONST>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> Screen </IDENTIFIER>
	<SYMBOL> . </SYMBOL>
	<IDENTIFIER> setColor </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<KEYWORD> false </KEYWORD>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> Screen </IDENTIFIER>
	<SYMBOL> . </SYMBOL>
	<IDENTIFIER> drawRectangle </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<IDENTIFIER> x </IDENTIFIER>
	<SYMBOL> , </SYMBOL>
	<SYMBOL> ( </SYMBOL>
	<IDENTIFIER> y </IDENTIFIER>
	<SYMBOL> + </SYMBOL>
	<IDENTIFIER> size </IDENTIFIER>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> - </SYMBOL>
	<INT_CONST> 1 </INT_CONST>
	<SYMBOL> , </SYMBOL>
	<IDENTIFIER> x </IDENTIFIER>
	<SYMBOL> + </SYMBOL>
	<IDENTIFIER> size </IDENTIFIER>
	<SYMBOL> , </SYMBOL>
	<IDENTIFIER> y </IDENTIFIER>
	<SYMBOL> + </SYMBOL>
	<IDENTIFIER> size </IDENTIFIER>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> let </KEYWORD>
	<IDENTIFIER> y </IDENTIFIER>
	<SYMBOL> = </SYMBOL>
	<IDENTIFIER> y </IDENTIFIER>
	<SYMBOL> - </SYMBOL>
	<INT_CONST> 2 </INT_CONST>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> Screen </IDENTIFIER>
	<SYMBOL> . </SYMBOL>
	<IDENTIFIER> setColor </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<KEYWORD> true </KEYWORD>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> Screen </IDENTIFIER>
	<SYMBOL> . </SYMBOL>
	<IDENTIFIER> drawRectangle </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<IDENTIFIER> x </IDENTIFIER>
	<SYMBOL> , </SYMBOL>
	<IDENTIFIER> y </IDENTIFIER>
	<SYMBOL> , </SYMBOL>
	<IDENTIFIER> x </IDENTIFIER>
	<SYMBOL> + </SYMBOL>
	<IDENTIFIER> size </IDENTIFIER>
	<SYMBOL> , </SYMBOL>
	<IDENTIFIER> y </IDENTIFIER>
	<SYMBOL> + </SYMBOL>
	<INT_CONST> 1 </INT_CONST>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<KEYWORD> return </KEYWORD>
	<SYMBOL> ; </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<KEYWORD> method </KEYWORD>
	<KEYWORD> void </KEYWORD>
	<IDENTIFIER> moveDown </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> if </KEYWORD>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ( </SYMBOL>
	<IDENTIFIER> y </IDENTIFIER>
	<SYMBOL> + </SYMBOL>
	<IDENTIFIER> size </IDENTIFIER>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> &lt; </SYMBOL>
	<INT_CONST> 254 </INT_CONST>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> Screen </IDENTIFIER>
	<SYMBOL> . </SYMBOL>
	<IDENTIFIER> setColor </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<KEYWORD> false </KEYWORD>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> Screen </IDENTIFIER>
	<SYMBOL> . </SYMBOL>
	<IDENTIFIER> drawRectangle </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<IDENTIFIER> x </IDENTIFIER>
	<SYMBOL> , </SYMBOL>
	<IDENTIFIER> y </IDENTIFIER>
	<SYMBOL> , </SYMBOL>
	<IDENTIFIER> x </IDENTIFIER>
	<SYMBOL> + </SYMBOL>
	<IDENTIFIER> size </IDENTIFIER>
	<SYMBOL> , </SYMBOL>
	<IDENTIFIER> y </IDENTIFIER>
	<SYMBOL> + </SYMBOL>
	<INT_CONST> 1 </INT_CONST>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> let </KEYWORD>
	<IDENTIFIER> y </IDENTIFIER>
	<SYMBOL> = </SYMBOL>
	<IDENTIFIER> y </IDENTIFIER>
	<SYMBOL> + </SYMBOL>
	<INT_CONST> 2 </INT_CONST>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> Screen </IDENTIFIER>
	<SYMBOL> . </SYMBOL>
	<IDENTIFIER> setColor </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<KEYWORD> true </KEYWORD>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> Screen </IDENTIFIER>
	<SYMBOL> . </SYMBOL>
	<IDENTIFIER> drawRectangle </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<IDENTIFIER> x </IDENTIFIER>
	<SYMBOL> , </SYMBOL>
	<SYMBOL> ( </SYMBOL>
	<IDENTIFIER> y </IDENTIFIER>
	<SYMBOL> + </SYMBOL>
	<IDENTIFIER> size </IDENTIFIER>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> - </SYMBOL>
	<INT_CONST> 1 </INT_CONST>
	<SYMBOL> , </SYMBOL>
	<IDENTIFIER> x </IDENTIFIER>
	<SYMBOL> + </SYMBOL>
	<IDENTIFIER> size </IDENTIFIER>
	<SYMBOL> , </SYMBOL>
	<IDENTIFIER> y </IDENTIFIER>
	<SYMBOL> + </SYMBOL>
	<IDENTIFIER> size </IDENTIFIER>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<KEYWORD> return </KEYWORD>
	<SYMBOL> ; </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<KEYWORD> method </KEYWORD>
	<KEYWORD> void </KEYWORD>
	<IDENTIFIER> moveLeft </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> if </KEYWORD>
	<SYMBOL> ( </SYMBOL>
	<IDENTIFIER> x </IDENTIFIER>
	<SYMBOL> &gt; </SYMBOL>
	<INT_CONST> 1 </INT_CONST>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> Screen </IDENTIFIER>
	<SYMBOL> . </SYMBOL>
	<IDENTIFIER> setColor </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<KEYWORD> false </KEYWORD>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> Screen </IDENTIFIER>
	<SYMBOL> . </SYMBOL>
	<IDENTIFIER> drawRectangle </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ( </SYMBOL>
	<IDENTIFIER> x </IDENTIFIER>
	<SYMBOL> + </SYMBOL>
	<IDENTIFIER> size </IDENTIFIER>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> - </SYMBOL>
	<INT_CONST> 1 </INT_CONST>
	<SYMBOL> , </SYMBOL>
	<IDENTIFIER> y </IDENTIFIER>
	<SYMBOL> , </SYMBOL>
	<IDENTIFIER> x </IDENTIFIER>
	<SYMBOL> + </SYMBOL>
	<IDENTIFIER> size </IDENTIFIER>
	<SYMBOL> , </SYMBOL>
	<IDENTIFIER> y </IDENTIFIER>
	<SYMBOL> + </SYMBOL>
	<IDENTIFIER> size </IDENTIFIER>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> let </KEYWORD>
	<IDENTIFIER> x </IDENTIFIER>
	<SYMBOL> = </SYMBOL>
	<IDENTIFIER> x </IDENTIFIER>
	<SYMBOL> - </SYMBOL>
	<INT_CONST> 2 </INT_CONST>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> Screen </IDENTIFIER>
	<SYMBOL> . </SYMBOL>
	<IDENTIFIER> setColor </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<KEYWORD> true </KEYWORD>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> Screen </IDENTIFIER>
	<SYMBOL> . </SYMBOL>
	<IDENTIFIER> drawRectangle </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<IDENTIFIER> x </IDENTIFIER>
	<SYMBOL> , </SYMBOL>
	<IDENTIFIER> y </IDENTIFIER>
	<SYMBOL> , </SYMBOL>
	<IDENTIFIER> x </IDENTIFIER>
	<SYMBOL> + </SYMBOL>
	<INT_CONST> 1 </INT_CONST>
	<SYMBOL> , </SYMBOL>
	<IDENTIFIER> y </IDENTIFIER>
	<SYMBOL> + </SYMBOL>
	<IDENTIFIER> size </IDENTIFIER>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<KEYWORD> return </KEYWORD>
	<SYMBOL> ; </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<KEYWORD> method </KEYWORD>
	<KEYWORD> void </KEYWORD>
	<IDENTIFIER> moveRight </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> if </KEYWORD>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ( </SYMBOL>
	<IDENTIFIER> x </IDENTIFIER>
	<SYMBOL> + </SYMBOL>
	<IDENTIFIER> size </IDENTIFIER>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> &lt; </SYMBOL>
	<INT_CONST> 510 </INT_CONST>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> { </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> Screen </IDENTIFIER>
	<SYMBOL> . </SYMBOL>
	<IDENTIFIER> setColor </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<KEYWORD> false </KEYWORD>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> Screen </IDENTIFIER>
	<SYMBOL> . </SYMBOL>
	<IDENTIFIER> drawRectangle </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<IDENTIFIER> x </IDENTIFIER>
	<SYMBOL> , </SYMBOL>
	<IDENTIFIER> y </IDENTIFIER>
	<SYMBOL> , </SYMBOL>
	<IDENTIFIER> x </IDENTIFIER>
	<SYMBOL> + </SYMBOL>
	<INT_CONST> 1 </INT_CONST>
	<SYMBOL> , </SYMBOL>
	<IDENTIFIER> y </IDENTIFIER>
	<SYMBOL> + </SYMBOL>
	<IDENTIFIER> size </IDENTIFIER>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> let </KEYWORD>
	<IDENTIFIER> x </IDENTIFIER>
	<SYMBOL> = </SYMBOL>
	<IDENTIFIER> x </IDENTIFIER>
	<SYMBOL> + </SYMBOL>
	<INT_CONST> 2 </INT_CONST>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> Screen </IDENTIFIER>
	<SYMBOL> . </SYMBOL>
	<IDENTIFIER> setColor </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<KEYWORD> true </KEYWORD>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<KEYWORD> do </KEYWORD>
	<IDENTIFIER> Screen </IDENTIFIER>
	<SYMBOL> . </SYMBOL>
	<IDENTIFIER> drawRectangle </IDENTIFIER>
	<SYMBOL> ( </SYMBOL>
	<SYMBOL> ( </SYMBOL>
	<IDENTIFIER> x </IDENTIFIER>
	<SYMBOL> + </SYMBOL>
	<IDENTIFIER> size </IDENTIFIER>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> - </SYMBOL>
	<INT_CONST> 1 </INT_CONST>
	<SYMBOL> , </SYMBOL>
	<IDENTIFIER> y </IDENTIFIER>
	<SYMBOL> , </SYMBOL>
	<IDENTIFIER> x </IDENTIFIER>
	<SYMBOL> + </SYMBOL>
	<IDENTIFIER> size </IDENTIFIER>
	<SYMBOL> , </SYMBOL>
	<IDENTIFIER> y </IDENTIFIER>
	<SYMBOL> + </SYMBOL>
	<IDENTIFIER> size </IDENTIFIER>
	<SYMBOL> ) </SYMBOL>
	<SYMBOL> ; </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<KEYWORD> return </KEYWORD>
	<SYMBOL> ; </SYMBOL>
	<SYMBOL> } </SYMBOL>
	<SYMBOL> } </SYMBOL>
</tokens>