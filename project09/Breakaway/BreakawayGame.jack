// Brian Grady
// File name: src/project09/Breakaway/BreakawayGame.jack

/**
 * Implements the Breakaway game.
 * The player moves a paddle left and right to redirect a
 * moving ball into a "wall" of breakable bricks.
 * The left and right arrow keys are used to move the paddle.
 * The 'q' key is used to quit the game.
 */
class BreakawayGame {

    // The play area
    field PlayArea playarea;
    
    // The score
    
    // The ball
    field Ball ball;
    
    // The paddle
    field Paddle paddle;
    
    // The wall
    field Wall wall;
    
    // User input
    field char key;
    
    // Exit state
    field boolean exit;

    /** Constructs a new Breakaway Game. */
    constructor BreakawayGame new() {
        
        let playarea = PlayArea.new(216, 252); //(width, height)
        
        let ball = Ball.new(250, 100, 2, 3, 6); // x,y,size,delta_x,delta_y
        
        let paddle = Paddle.new(255, 220, 25, 7); // x,y,width,height
                
        let wall = Wall.new();
        do wall.newBrick(255, 50, 20, 10);
        do wall.newBrick(185, 50, 20, 10);
        do wall.newBrick(205, 80, 20, 10);
        do wall.newBrick(295, 90, 20, 10);


        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do playarea.dispose();
        do ball.dispose();
        do paddle.dispose();
        do wall.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** The game loop. Very simple: processInput, update, render, delay. */
    method void run() {
        let exit = false;

        while (~exit) {
            do processInput();
            do update();
            do render();
            do Sys.wait(55);
        }
            
        return;
	}

    /** Process player input from the keyboard. */
    /** Notes: Maybe save input in a more readable way than key = 81 or 130 or 132? */
    method void processInput() {
        let key = Keyboard.keyPressed();
        return;
    }
    
    /** Update game state. */
    /** Notes: Need to clean this up so its easy to read (move objects, collision detection, collision resolution)*/
    method void update() {
        var Hitbox ballh, playareah, paddleh;
        
        let playareah = playarea.getHitbox();
        
        if (key = 81) {         // q
            let exit = true;
        }
        
        // sim paddle movement, resolve collisions with play area, move paddle
        if (key = 130) {        // left arrow
            do paddle.moveLeftSim();
            let paddleh = paddle.getHitbox();
            if ( ~( paddleh.getXmin() < playareah.getXmin() ) ) {
                do paddle.moveLeft();
            }    
        }
            
        if (key = 132) {        // right arrow
            do paddle.moveRightSim();
            let paddleh = paddle.getHitbox();
            if ( ~(paddleh.getXmax() > playareah.getXmax()) ) {
                do paddle.moveRight();
            }    
        }
        
        
        // sim ball movement, resolve collisions with play area and paddle, move ball
        
        do ball.moveBallSim();
        let ballh = ball.getHitbox();
        let paddleh = paddle.getHitbox();

        if ( ( ballh.getXmin() < playareah.getXmin() ) | ( ballh.getXmax() > playareah.getXmax() ) ) {
            do ball.flipDeltaX();
        }

        if ( ( ballh.getYmin() < playareah.getYmin() ) | ( ballh.getYmax() > playareah.getYmax() ) ) {
            do ball.flipDeltaY();
        }
        
        if ( ( ballh.getYmax() > paddleh.getYmin() ) & ( ballh.getYmin() < paddleh.getYmax() ) &
             ( ballh.getXmax() > paddleh.getXmin() ) & ( ballh.getXmin() < paddleh.getXmax() ) ){
            do ball.flipDeltaY();
        }
                
        do ball.moveBall();
        
        do ballh.dispose();
        do playareah.dispose();
        do paddleh.dispose();
        
        do wall.moveRight();
               
        return;
    }

        /** Render graphics on screen. */
    method void render() {
        do playarea.clear();
        
        do wall.draw();
        do paddle.draw();
        do ball.draw();
        
        return;
    }
            
}
