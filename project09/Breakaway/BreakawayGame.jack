// Brian Grady
// File name: src/project09/Breakaway/BreakawayGame.jack

/**
 * Implements the Breakaway game.
 * In this game you move a paddle to direct a moving
 * ball into a wall of breakable bricks.
 * The left and right arrow keys are used to move the paddle.
 * The 'q' key is used to quit the game.
 */
class BreakawayGame {

    // The play area
    field PlayArea playarea;
    
    // The score
    
    // The ball
    field Ball ball;
    
    // The paddle
    field Paddle paddle;
    
    // The wall
    
    // User input
    field char key;
    
    // Exit state
    field boolean exit;

    /** Constructs a new Breakaway Game. */
    constructor BreakawayGame new() {
        
        let playarea = PlayArea.new(216, 252);
        
        let ball = Ball.new(1024, 512, 2, 10, 27);
        
        let paddle = Paddle.new(255, 127, 25, 7);

        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do playarea.dispose();
        do ball.dispose();
        do paddle.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** The game loop. Very simple: processInput, update, render. */
    method void run() {
        let exit = false;

        while (~exit) {
            do processInput();
            do update();
            do render();
            do Sys.wait(55);
        }
            
        return;
	}

    /** Process Input. */
    method void processInput() {
        let key = Keyboard.keyPressed();
        /**if (key = 81) { //q
            let exit = true;
        }
        if (key = 90) {
            //z or x
        }
        if (key = 88) {
            //z or x
        }
        if (key = 131) {
            //up
        }
        if (key = 133) {
            //down
        }
        if (key = 130) {
            //left
        }
        if (key = 132) {
            //right
        }*/
        return;
    }
    
        /** Update game state. */
    method void update() {
        var Hitbox ballh, playareah, paddleh;
        
        if (key = 81) {
            let exit = true;
        }
        if (key = 130) {
            do paddle.moveLeft();
        }
        if (key = 132) {
            do paddle.moveRight();
        }
        
        do ball.moveBallSim();
        
        let ballh = ball.getHitbox();
        let playareah = playarea.getHitbox();
        let paddleh = paddle.getHitbox();
        
        if ( ( ballh.getXLower() < playareah.getXLower() ) | ( ballh.getXUpper() > playareah.getXUpper() ) ) {
            do ball.flipDeltaX();
        }

        if ( ( ballh.getYLower() < playareah.getYLower() ) | ( ballh.getYUpper() > playareah.getYUpper() ) ) {
            do ball.flipDeltaY();
        }        
        
        do ball.moveBall();
        
        return;
    }

        /** Render graphics on screen. */
    method void render() {
        do playarea.clear();
        do paddle.draw();
        do ball.draw();
        return;
    }
    
    /**method boolean collisionDetector( Hitbox A, Hitbox B ) {
        var Hitbox a, b;
        var int axu, axl, ayu, ayl;
        var int bxu, bxl, byu, byl;
        let a = A;
        let b = B;
        
        let axu = a.getXUpper();
        let axl = a.getXLower();
        let ayu = a.getYUpper();
        let ayl = a.getYLower();
        
        let bxu = b.getXUpper();
        let bxl = b.getXLower();
        let byu = b.getYUpper();
        let byl = b.getYLower();
        
        
    
    }*/
    
    /**method void collisionResolver(    ) {
        var Hitbox hitbox;
        
        hitbox = ball.getHitbox();
    }*/
        
}
